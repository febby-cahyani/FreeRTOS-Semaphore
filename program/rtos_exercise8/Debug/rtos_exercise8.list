
rtos_exercise8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080056d0  080056d0  000066d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000067f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005804  08005804  00006804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005808  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000064  0800586c  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c0c  0800586c  00007c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5c  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dac  00000000  00000000  0001aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9f  00000000  00000000  0001ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d4c  00000000  00000000  0001fbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cde  00000000  00000000  0002293b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095150  00000000  00000000  00035619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  000ca7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cf4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056b8 	.word	0x080056b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080056b8 	.word	0x080056b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 80004d4:	4b21      	ldr	r3, [pc, #132]	@ (800055c <main+0x8c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <main+0x90>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 80004e0:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <main+0x94>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 facf 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f85b 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8b9 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, HIGH);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f8:	481b      	ldr	r0, [pc, #108]	@ (8000568 <main+0x98>)
 80004fa:	f000 fd91 	bl	8001020 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fe:	f001 fcf1 	bl	8001ee4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000502:	4a1a      	ldr	r2, [pc, #104]	@ (800056c <main+0x9c>)
 8000504:	2101      	movs	r1, #1
 8000506:	2001      	movs	r0, #1
 8000508:	f001 fde3 	bl	80020d2 <osSemaphoreNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <main+0xa0>)
 8000510:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000512:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <main+0xa4>)
 8000514:	2100      	movs	r1, #0
 8000516:	4818      	ldr	r0, [pc, #96]	@ (8000578 <main+0xa8>)
 8000518:	f001 fd2e 	bl	8001f78 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a17      	ldr	r2, [pc, #92]	@ (800057c <main+0xac>)
 8000520:	6013      	str	r3, [r2, #0]

  /* creation of Green_Led_Flash */
  Green_Led_FlashHandle = osThreadNew(GreenTask, NULL, &Green_Led_Flash_attributes);
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <main+0xb0>)
 8000524:	2100      	movs	r1, #0
 8000526:	4817      	ldr	r0, [pc, #92]	@ (8000584 <main+0xb4>)
 8000528:	f001 fd26 	bl	8001f78 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a16      	ldr	r2, [pc, #88]	@ (8000588 <main+0xb8>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of Red_Led_Flash */
  Red_Led_FlashHandle = osThreadNew(RedTask, NULL, &Red_Led_Flash_attributes);
 8000532:	4a16      	ldr	r2, [pc, #88]	@ (800058c <main+0xbc>)
 8000534:	2100      	movs	r1, #0
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <main+0xc0>)
 8000538:	f001 fd1e 	bl	8001f78 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <main+0xc4>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of Orange_Led_Flas */
  Orange_Led_FlasHandle = osThreadNew(OrangeTask, NULL, &Orange_Led_Flas_attributes);
 8000542:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <main+0xc8>)
 8000544:	2100      	movs	r1, #0
 8000546:	4815      	ldr	r0, [pc, #84]	@ (800059c <main+0xcc>)
 8000548:	f001 fd16 	bl	8001f78 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a14      	ldr	r2, [pc, #80]	@ (80005a0 <main+0xd0>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f001 fceb 	bl	8001f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x86>
 800055a:	bf00      	nop
 800055c:	20000094 	.word	0x20000094
 8000560:	20000096 	.word	0x20000096
 8000564:	20000095 	.word	0x20000095
 8000568:	40020000 	.word	0x40020000
 800056c:	080057d0 	.word	0x080057d0
 8000570:	20000090 	.word	0x20000090
 8000574:	08005740 	.word	0x08005740
 8000578:	08000735 	.word	0x08000735
 800057c:	20000080 	.word	0x20000080
 8000580:	08005764 	.word	0x08005764
 8000584:	08000745 	.word	0x08000745
 8000588:	20000084 	.word	0x20000084
 800058c:	08005788 	.word	0x08005788
 8000590:	080007b5 	.word	0x080007b5
 8000594:	20000088 	.word	0x20000088
 8000598:	080057ac 	.word	0x080057ac
 800059c:	08000825 	.word	0x08000825
 80005a0:	2000008c 	.word	0x2000008c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 ff98 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <SystemClock_Config+0xb8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xbc>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fd35 	bl	8001088 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 f920 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ff98 	bl	8001578 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064e:	f000 f90b 	bl	8000868 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0x80>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0x80>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_GPIO_Init+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <MX_GPIO_Init+0x80>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_GPIO_Init+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006ba:	f000 fcb1 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80006be:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0x84>)
 80006d8:	f000 fb1e 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000

080006ec <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	//osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever);
    if (StartFlag == 1) {
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <AccessSharedData+0x40>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d103      	bne.n	8000700 <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <AccessSharedData+0x40>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e005      	b.n	800070c <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, HIGH);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000706:	480a      	ldr	r0, [pc, #40]	@ (8000730 <AccessSharedData+0x44>)
 8000708:	f000 fc8a 	bl	8001020 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
//    SimulateReadWriteOperation();
    HAL_Delay(500);
 800070c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000710:	f000 f9fc 	bl	8000b0c <HAL_Delay>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <AccessSharedData+0x40>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, LOW);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <AccessSharedData+0x44>)
 8000722:	f000 fc7d 	bl	8001020 <HAL_GPIO_WritePin>

    //osSemaphoreRelease(CriticalResourceSemaphoreHandle);
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000094 	.word	0x20000094
 8000730:	40020000 	.word	0x40020000

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f001 fcad 	bl	800209c <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <GreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenTask */
void GreenTask(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenTask */
  /* Infinite loop */
  for(;;)
  {
		GreenFlag = 1;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <GreenTask+0x60>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		// Turn on Green LED
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, HIGH);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000758:	4813      	ldr	r0, [pc, #76]	@ (80007a8 <GreenTask+0x64>)
 800075a:	f000 fc61 	bl	8001020 <HAL_GPIO_WritePin>

		// Enter critical section
		osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <GreenTask+0x68>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <GreenTask+0x6c>)
 8000764:	8812      	ldrh	r2, [r2, #0]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fd3b 	bl	80021e4 <osSemaphoreAcquire>
		AccessSharedData();
 800076e:	f7ff ffbd 	bl	80006ec <AccessSharedData>
		osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <GreenTask+0x68>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fd86 	bl	8002288 <osSemaphoreRelease>

		// Turn off Green LED
		osDelay(400);
 800077c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000780:	f001 fc8c 	bl	800209c <osDelay>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, LOW);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078a:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <GreenTask+0x64>)
 800078c:	f000 fc48 	bl	8001020 <HAL_GPIO_WritePin>

		GreenFlag = 0;
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <GreenTask+0x60>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		// Delay for 500 milliseconds
		osDelay(400);
 8000796:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800079a:	f001 fc7f 	bl	800209c <osDelay>
		GreenFlag = 1;
 800079e:	bf00      	nop
 80007a0:	e7d4      	b.n	800074c <GreenTask+0x8>
 80007a2:	bf00      	nop
 80007a4:	20000096 	.word	0x20000096
 80007a8:	40020000 	.word	0x40020000
 80007ac:	20000090 	.word	0x20000090
 80007b0:	20000000 	.word	0x20000000

080007b4 <RedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedTask */
void RedTask(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedTask */
  /* Infinite loop */
  for(;;)
  {
		RedFlag = 1;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <RedTask+0x60>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
		// Turn on Red LED
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, HIGH);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <RedTask+0x64>)
 80007ca:	f000 fc29 	bl	8001020 <HAL_GPIO_WritePin>

		// Enter critical section
		osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <RedTask+0x68>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a13      	ldr	r2, [pc, #76]	@ (8000820 <RedTask+0x6c>)
 80007d4:	8812      	ldrh	r2, [r2, #0]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 fd03 	bl	80021e4 <osSemaphoreAcquire>
		AccessSharedData();
 80007de:	f7ff ff85 	bl	80006ec <AccessSharedData>
		osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <RedTask+0x68>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fd4e 	bl	8002288 <osSemaphoreRelease>

		// Turn off Red LED
		osDelay(450);
 80007ec:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80007f0:	f001 fc54 	bl	800209c <osDelay>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, LOW);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007fa:	4807      	ldr	r0, [pc, #28]	@ (8000818 <RedTask+0x64>)
 80007fc:	f000 fc10 	bl	8001020 <HAL_GPIO_WritePin>

		RedFlag = 0;
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <RedTask+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
		// Delay for 100 milliseconds
		osDelay(450);
 8000806:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800080a:	f001 fc47 	bl	800209c <osDelay>
		RedFlag = 1;
 800080e:	bf00      	nop
 8000810:	e7d4      	b.n	80007bc <RedTask+0x8>
 8000812:	bf00      	nop
 8000814:	20000095 	.word	0x20000095
 8000818:	40020000 	.word	0x40020000
 800081c:	20000090 	.word	0x20000090
 8000820:	20000000 	.word	0x20000000

08000824 <OrangeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeTask */
void OrangeTask(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 800082c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <OrangeTask+0x1c>)
 8000832:	f000 fc0e 	bl	8001052 <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000836:	2032      	movs	r0, #50	@ 0x32
 8000838:	f001 fc30 	bl	800209c <osDelay>
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 800083c:	bf00      	nop
 800083e:	e7f5      	b.n	800082c <OrangeTask+0x8>
 8000840:	40020000 	.word	0x40020000

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 f939 	bl	8000acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40000800 	.word	0x40000800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <HAL_MspInit+0x54>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_MspInit+0x54>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fa03 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b33      	ldr	r3, [pc, #204]	@ (80009b0 <HAL_InitTick+0xe4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a32      	ldr	r2, [pc, #200]	@ (80009b0 <HAL_InitTick+0xe4>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <HAL_InitTick+0xe4>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f804 	bl	8001910 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000912:	f000 ffe9 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8000916:	6378      	str	r0, [r7, #52]	@ 0x34
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800091a:	f000 ffe5 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 800091e:	4603      	mov	r3, r0
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <HAL_InitTick+0xe8>)
 8000928:	fba2 2303 	umull	r2, r3, r2, r3
 800092c:	0c9b      	lsrs	r3, r3, #18
 800092e:	3b01      	subs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <HAL_InitTick+0xec>)
 8000934:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <HAL_InitTick+0xf0>)
 8000936:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <HAL_InitTick+0xec>)
 800093a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000940:	4a1d      	ldr	r2, [pc, #116]	@ (80009b8 <HAL_InitTick+0xec>)
 8000942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000944:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <HAL_InitTick+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <HAL_InitTick+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <HAL_InitTick+0xec>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000958:	4817      	ldr	r0, [pc, #92]	@ (80009b8 <HAL_InitTick+0xec>)
 800095a:	f001 f80b 	bl	8001974 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11b      	bne.n	80009a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800096c:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <HAL_InitTick+0xec>)
 800096e:	f001 f85b 	bl	8001a28 <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000980:	201e      	movs	r0, #30
 8000982:	f000 f9bb 	bl	8000cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d808      	bhi.n	800099e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	201e      	movs	r0, #30
 8000992:	f000 f997 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_InitTick+0xf4>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e002      	b.n	80009a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3738      	adds	r7, #56	@ 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20000098 	.word	0x20000098
 80009bc:	40000800 	.word	0x40000800
 80009c0:	20000008 	.word	0x20000008

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a00:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <TIM4_IRQHandler+0x10>)
 8000a02:	f001 f873 	bl	8001aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000098 	.word	0x20000098

08000a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a38:	f7ff ffea 	bl	8000a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	@ (8000a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 fd9f 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fd33 	bl	80004d0 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a78:	08005808 	.word	0x08005808
  ldr r2, =_sbss
 8000a7c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a80:	20001c0c 	.word	0x20001c0c

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <HAL_Init+0x40>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_Init+0x40>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_Init+0x40>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f8fc 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f7ff ff08 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff feda 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000000c 	.word	0x2000000c
 8000af0:	200000e0 	.word	0x200000e0

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000e0 	.word	0x200000e0

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff ffee 	bl	8000af4 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffde 	bl	8000af4 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd6:	f7ff ff61 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f7ff ffb1 	bl	8000c48 <NVIC_EncodePriority>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff80 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff54 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	@ 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e159      	b.n	8000fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8148 	bne.w	8000fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d017      	beq.n	8000e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b57      	ldr	r3, [pc, #348]	@ (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a56      	ldr	r2, [pc, #344]	@ (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b54      	ldr	r3, [pc, #336]	@ (8001000 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a52      	ldr	r2, [pc, #328]	@ (8001004 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x202>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	@ (800100c <HAL_GPIO_Init+0x2f4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1fe>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	@ (8001010 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1fa>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	@ (8001014 <HAL_GPIO_Init+0x2fc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1f6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	@ (8001018 <HAL_GPIO_Init+0x300>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1f2>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	@ (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a24      	ldr	r2, [pc, #144]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800101c <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f aea2 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	041a      	lsls	r2, r3, #16
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43d9      	mvns	r1, r3
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	400b      	ands	r3, r1
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	619a      	str	r2, [r3, #24]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e267      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d075      	beq.n	8001192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010a6:	4b88      	ldr	r3, [pc, #544]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d00c      	beq.n	80010cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4b85      	ldr	r3, [pc, #532]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d112      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010be:	4b82      	ldr	r3, [pc, #520]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ca:	d10b      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	4b7e      	ldr	r3, [pc, #504]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d05b      	beq.n	8001190 <HAL_RCC_OscConfig+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d157      	bne.n	8001190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e242      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ec:	d106      	bne.n	80010fc <HAL_RCC_OscConfig+0x74>
 80010ee:	4b76      	ldr	r3, [pc, #472]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a75      	ldr	r2, [pc, #468]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x98>
 8001106:	4b70      	ldr	r3, [pc, #448]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6f      	ldr	r2, [pc, #444]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b6d      	ldr	r3, [pc, #436]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6c      	ldr	r2, [pc, #432]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xb0>
 8001120:	4b69      	ldr	r3, [pc, #420]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a68      	ldr	r2, [pc, #416]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b66      	ldr	r3, [pc, #408]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a65      	ldr	r2, [pc, #404]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcd8 	bl	8000af4 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcd4 	bl	8000af4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	@ 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e207      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b5b      	ldr	r3, [pc, #364]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xc0>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcc4 	bl	8000af4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcc0 	bl	8000af4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1f3      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b51      	ldr	r3, [pc, #324]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0xe8>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800119e:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b47      	ldr	r3, [pc, #284]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b41      	ldr	r3, [pc, #260]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1c7      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4937      	ldr	r1, [pc, #220]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b34      	ldr	r3, [pc, #208]	@ (80012cc <HAL_RCC_OscConfig+0x244>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc79 	bl	8000af4 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc75 	bl	8000af4 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1a8      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4925      	ldr	r1, [pc, #148]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_RCC_OscConfig+0x244>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fc58 	bl	8000af4 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc54 	bl	8000af4 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e187      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d036      	beq.n	80012e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d016      	beq.n	80012a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_RCC_OscConfig+0x248>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fc38 	bl	8000af4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc34 	bl	8000af4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e167      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_RCC_OscConfig+0x240>)
 800129c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x200>
 80012a6:	e01b      	b.n	80012e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_RCC_OscConfig+0x248>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fc21 	bl	8000af4 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b4:	e00e      	b.n	80012d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc1d 	bl	8000af4 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d907      	bls.n	80012d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e150      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
 80012c8:	40023800 	.word	0x40023800
 80012cc:	42470000 	.word	0x42470000
 80012d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80012d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ea      	bne.n	80012b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8097 	beq.w	800141c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b81      	ldr	r3, [pc, #516]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a7c      	ldr	r2, [pc, #496]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b7a      	ldr	r3, [pc, #488]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b77      	ldr	r3, [pc, #476]	@ (80014fc <HAL_RCC_OscConfig+0x474>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132a:	4b74      	ldr	r3, [pc, #464]	@ (80014fc <HAL_RCC_OscConfig+0x474>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a73      	ldr	r2, [pc, #460]	@ (80014fc <HAL_RCC_OscConfig+0x474>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fbdd 	bl	8000af4 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fbd9 	bl	8000af4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e10c      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <HAL_RCC_OscConfig+0x474>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x2ea>
 8001364:	4b64      	ldr	r3, [pc, #400]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001368:	4a63      	ldr	r2, [pc, #396]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x324>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x30c>
 800137a:	4b5f      	ldr	r3, [pc, #380]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137e:	4a5e      	ldr	r2, [pc, #376]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	@ 0x70
 8001386:	4b5c      	ldr	r3, [pc, #368]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138a:	4a5b      	ldr	r2, [pc, #364]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6713      	str	r3, [r2, #112]	@ 0x70
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x324>
 8001394:	4b58      	ldr	r3, [pc, #352]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001398:	4a57      	ldr	r2, [pc, #348]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a0:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a4:	4a54      	ldr	r2, [pc, #336]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f023 0304 	bic.w	r3, r3, #4
 80013aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d015      	beq.n	80013e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb9e 	bl	8000af4 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb9a 	bl	8000af4 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0cb      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b49      	ldr	r3, [pc, #292]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0ee      	beq.n	80013bc <HAL_RCC_OscConfig+0x334>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb88 	bl	8000af4 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb84 	bl	8000af4 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e0b5      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ee      	bne.n	80013e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b39      	ldr	r3, [pc, #228]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	4a38      	ldr	r2, [pc, #224]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a1 	beq.w	8001568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001426:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d05c      	beq.n	80014ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d141      	bne.n	80014be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <HAL_RCC_OscConfig+0x478>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb58 	bl	8000af4 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff fb54 	bl	8000af4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e087      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69da      	ldr	r2, [r3, #28]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	3b01      	subs	r3, #1
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	491b      	ldr	r1, [pc, #108]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_RCC_OscConfig+0x478>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb2d 	bl	8000af4 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fb29 	bl	8000af4 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e05c      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x416>
 80014bc:	e054      	b.n	8001568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_RCC_OscConfig+0x478>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb16 	bl	8000af4 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fb12 	bl	8000af4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e045      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_RCC_OscConfig+0x470>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x444>
 80014ea:	e03d      	b.n	8001568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e038      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000
 8001500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x4ec>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d028      	beq.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d121      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d11a      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800153a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	4293      	cmp	r3, r2
 800153e:	d111      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	3b01      	subs	r3, #1
 800154e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b65      	ldr	r3, [pc, #404]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fa44 	bl	8000af4 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fa40 	bl	8000af4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b25      	ldr	r3, [pc, #148]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f821 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	@ (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	@ (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f8d4 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	080057e0 	.word	0x080057e0
 800173c:	20000004 	.word	0x20000004
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001748:	b090      	sub	sp, #64	@ 0x40
 800174a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175c:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d00d      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x40>
 8001768:	2b08      	cmp	r3, #8
 800176a:	f200 80a1 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x34>
 8001772:	2b04      	cmp	r3, #4
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x3a>
 8001776:	e09b      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b53      	ldr	r3, [pc, #332]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800177c:	e09b      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001782:	e098      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001784:	4b4f      	ldr	r3, [pc, #316]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800178c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178e:	4b4d      	ldr	r3, [pc, #308]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d028      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	2200      	movs	r2, #0
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017ac:	2100      	movs	r1, #0
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 80017b0:	fb03 f201 	mul.w	r2, r3, r1
 80017b4:	2300      	movs	r3, #0
 80017b6:	fb00 f303 	mul.w	r3, r0, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	4a43      	ldr	r2, [pc, #268]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x188>)
 80017be:	fba0 1202 	umull	r1, r2, r0, r2
 80017c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017c4:	460a      	mov	r2, r1
 80017c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ca:	4413      	add	r3, r2
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d0:	2200      	movs	r2, #0
 80017d2:	61bb      	str	r3, [r7, #24]
 80017d4:	61fa      	str	r2, [r7, #28]
 80017d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017de:	f7fe fcff 	bl	80001e0 <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ea:	e053      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ec:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	2200      	movs	r2, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	617a      	str	r2, [r7, #20]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017fe:	f04f 0b00 	mov.w	fp, #0
 8001802:	4652      	mov	r2, sl
 8001804:	465b      	mov	r3, fp
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	0159      	lsls	r1, r3, #5
 8001810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001814:	0150      	lsls	r0, r2, #5
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ebb2 080a 	subs.w	r8, r2, sl
 800181e:	eb63 090b 	sbc.w	r9, r3, fp
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800182e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001836:	ebb2 0408 	subs.w	r4, r2, r8
 800183a:	eb63 0509 	sbc.w	r5, r3, r9
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	00eb      	lsls	r3, r5, #3
 8001848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184c:	00e2      	lsls	r2, r4, #3
 800184e:	4614      	mov	r4, r2
 8001850:	461d      	mov	r5, r3
 8001852:	eb14 030a 	adds.w	r3, r4, sl
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	eb45 030b 	adc.w	r3, r5, fp
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4629      	mov	r1, r5
 800186c:	028b      	lsls	r3, r1, #10
 800186e:	4621      	mov	r1, r4
 8001870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001874:	4621      	mov	r1, r4
 8001876:	028a      	lsls	r2, r1, #10
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187e:	2200      	movs	r2, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001888:	f7fe fcaa 	bl	80001e0 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3740      	adds	r7, #64	@ 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	017d7840 	.word	0x017d7840

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	@ (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	080057f0 	.word	0x080057f0

08001910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	220f      	movs	r2, #15
 800191e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_GetClockConfig+0x5c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <HAL_RCC_GetClockConfig+0x60>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e041      	b.n	8001a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f839 	bl	8001a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f000 f9b2 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d001      	beq.n	8001a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e044      	b.n	8001aca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d018      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x6c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6a:	d013      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x6c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	@ (8001adc <HAL_TIM_Base_Start_IT+0xb4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x6c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x6c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x6c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d010      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab6:	e007      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40000c00 	.word	0x40000c00
 8001ae8:	40014000 	.word	0x40014000

08001aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d020      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01b      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0202 	mvn.w	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8d2 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001b3c:	e005      	b.n	8001b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8c4 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f8d5 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d020      	beq.n	8001b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01b      	beq.n	8001b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0204 	mvn.w	r2, #4
 8001b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8ac 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001b88:	e005      	b.n	8001b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f89e 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f8af 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d020      	beq.n	8001be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0208 	mvn.w	r2, #8
 8001bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f886 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001bd4:	e005      	b.n	8001be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f878 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f889 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0210 	mvn.w	r2, #16
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2208      	movs	r2, #8
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f860 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f852 	bl	8001ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f863 	bl	8001cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0201 	mvn.w	r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fdf6 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8e6 	bl	8001e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f834 	bl	8001d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0220 	mvn.w	r2, #32
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8b8 	bl	8001e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <TIM_Base_SetConfig+0xfc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00f      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d3a:	d00b      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <TIM_Base_SetConfig+0x100>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a36      	ldr	r2, [pc, #216]	@ (8001e20 <TIM_Base_SetConfig+0x104>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0x38>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a35      	ldr	r2, [pc, #212]	@ (8001e24 <TIM_Base_SetConfig+0x108>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <TIM_Base_SetConfig+0xfc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01b      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d74:	d017      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <TIM_Base_SetConfig+0x100>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a27      	ldr	r2, [pc, #156]	@ (8001e20 <TIM_Base_SetConfig+0x104>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00f      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a26      	ldr	r2, [pc, #152]	@ (8001e24 <TIM_Base_SetConfig+0x108>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00b      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a25      	ldr	r2, [pc, #148]	@ (8001e28 <TIM_Base_SetConfig+0x10c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a24      	ldr	r2, [pc, #144]	@ (8001e2c <TIM_Base_SetConfig+0x110>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <TIM_Base_SetConfig+0x8a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <TIM_Base_SetConfig+0x114>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d108      	bne.n	8001db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0e      	ldr	r2, [pc, #56]	@ (8001e18 <TIM_Base_SetConfig+0xfc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d103      	bne.n	8001dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f023 0201 	bic.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40000c00 	.word	0x40000c00
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	40014400 	.word	0x40014400
 8001e30:	40014800 	.word	0x40014800

08001e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <__NVIC_SetPriority>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Handler+0x1c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001eb8:	f002 f996 	bl	80041e8 <xTaskGetSchedulerState>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ec2:	f003 f891 	bl	8004fe8 <xPortSysTickHandler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f06f 0004 	mvn.w	r0, #4
 8001eda:	f7ff ffbf 	bl	8001e5c <__NVIC_SetPriority>
#endif
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eea:	f3ef 8305 	mrs	r3, IPSR
 8001eee:	603b      	str	r3, [r7, #0]
  return(result);
 8001ef0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ef6:	f06f 0305 	mvn.w	r3, #5
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	e00c      	b.n	8001f18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <osKernelInitialize+0x44>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <osKernelInitialize+0x44>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e002      	b.n	8001f18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200000e4 	.word	0x200000e4

08001f2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f32:	f3ef 8305 	mrs	r3, IPSR
 8001f36:	603b      	str	r3, [r7, #0]
  return(result);
 8001f38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f3e:	f06f 0305 	mvn.w	r3, #5
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e010      	b.n	8001f68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <osKernelStart+0x48>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d109      	bne.n	8001f62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f4e:	f7ff ffbf 	bl	8001ed0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <osKernelStart+0x48>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f58:	f001 fce2 	bl	8003920 <vTaskStartScheduler>
      stat = osOK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e002      	b.n	8001f68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200000e4 	.word	0x200000e4

08001f78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	@ 0x38
 8001f7c:	af04      	add	r7, sp, #16
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f88:	f3ef 8305 	mrs	r3, IPSR
 8001f8c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d17e      	bne.n	8002092 <osThreadNew+0x11a>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d07b      	beq.n	8002092 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f9e:	2318      	movs	r3, #24
 8001fa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d045      	beq.n	800203e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <osThreadNew+0x48>
        name = attr->name;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <osThreadNew+0x6e>
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b38      	cmp	r3, #56	@ 0x38
 8001fd8:	d805      	bhi.n	8001fe6 <osThreadNew+0x6e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <osThreadNew+0x72>
        return (NULL);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e054      	b.n	8002094 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00e      	beq.n	8002020 <osThreadNew+0xa8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2ba7      	cmp	r3, #167	@ 0xa7
 8002008:	d90a      	bls.n	8002020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <osThreadNew+0xa8>
        mem = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e010      	b.n	8002042 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10c      	bne.n	8002042 <osThreadNew+0xca>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <osThreadNew+0xca>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <osThreadNew+0xca>
          mem = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e001      	b.n	8002042 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d110      	bne.n	800206a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002050:	9202      	str	r2, [sp, #8]
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f001 fa6a 	bl	8003538 <xTaskCreateStatic>
 8002064:	4603      	mov	r3, r0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e013      	b.n	8002092 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d110      	bne.n	8002092 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f001 fab8 	bl	80035f8 <xTaskCreate>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d001      	beq.n	8002092 <osThreadNew+0x11a>
            hTask = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002092:	693b      	ldr	r3, [r7, #16]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020a4:	f3ef 8305 	mrs	r3, IPSR
 80020a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80020aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <osDelay+0x1c>
    stat = osErrorISR;
 80020b0:	f06f 0305 	mvn.w	r3, #5
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e007      	b.n	80020c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 fbf6 	bl	80038b4 <vTaskDelay>
    }
  }

  return (stat);
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b08a      	sub	sp, #40	@ 0x28
 80020d6:	af02      	add	r7, sp, #8
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e2:	f3ef 8305 	mrs	r3, IPSR
 80020e6:	613b      	str	r3, [r7, #16]
  return(result);
 80020e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d175      	bne.n	80021da <osSemaphoreNew+0x108>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d072      	beq.n	80021da <osSemaphoreNew+0x108>
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d86e      	bhi.n	80021da <osSemaphoreNew+0x108>
    mem = -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <osSemaphoreNew+0x4c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b4f      	cmp	r3, #79	@ 0x4f
 8002116:	d902      	bls.n	800211e <osSemaphoreNew+0x4c>
        mem = 1;
 8002118:	2301      	movs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e00c      	b.n	8002138 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <osSemaphoreNew+0x66>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <osSemaphoreNew+0x66>
          mem = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	e001      	b.n	8002138 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d04c      	beq.n	80021da <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d128      	bne.n	8002198 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10a      	bne.n	8002162 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2203      	movs	r2, #3
 8002152:	9200      	str	r2, [sp, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2001      	movs	r0, #1
 800215a:	f000 fa2b 	bl	80025b4 <xQueueGenericCreateStatic>
 800215e:	61f8      	str	r0, [r7, #28]
 8002160:	e005      	b.n	800216e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002162:	2203      	movs	r2, #3
 8002164:	2100      	movs	r1, #0
 8002166:	2001      	movs	r0, #1
 8002168:	f000 faa1 	bl	80026ae <xQueueGenericCreate>
 800216c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d022      	beq.n	80021ba <osSemaphoreNew+0xe8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01f      	beq.n	80021ba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800217a:	2300      	movs	r3, #0
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	69f8      	ldr	r0, [r7, #28]
 8002182:	f000 fb61 	bl	8002848 <xQueueGenericSend>
 8002186:	4603      	mov	r3, r0
 8002188:	2b01      	cmp	r3, #1
 800218a:	d016      	beq.n	80021ba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800218c:	69f8      	ldr	r0, [r7, #28]
 800218e:	f000 ffff 	bl	8003190 <vQueueDelete>
            hSemaphore = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e010      	b.n	80021ba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fadf 	bl	800276a <xQueueCreateCountingSemaphoreStatic>
 80021ac:	61f8      	str	r0, [r7, #28]
 80021ae:	e004      	b.n	80021ba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fb12 	bl	80027dc <xQueueCreateCountingSemaphore>
 80021b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00c      	beq.n	80021da <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <osSemaphoreNew+0xfc>
          name = attr->name;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e001      	b.n	80021d2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80021d2:	6979      	ldr	r1, [r7, #20]
 80021d4:	69f8      	ldr	r0, [r7, #28]
 80021d6:	f001 f927 	bl	8003428 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80021da:	69fb      	ldr	r3, [r7, #28]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80021fc:	f06f 0303 	mvn.w	r3, #3
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e039      	b.n	8002278 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002204:	f3ef 8305 	mrs	r3, IPSR
 8002208:	60fb      	str	r3, [r7, #12]
  return(result);
 800220a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002216:	f06f 0303 	mvn.w	r3, #3
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e02c      	b.n	8002278 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	461a      	mov	r2, r3
 8002228:	2100      	movs	r1, #0
 800222a:	6938      	ldr	r0, [r7, #16]
 800222c:	f000 ff2e 	bl	800308c <xQueueReceiveFromISR>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d003      	beq.n	800223e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002236:	f06f 0302 	mvn.w	r3, #2
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e01c      	b.n	8002278 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d019      	beq.n	8002278 <osSemaphoreAcquire+0x94>
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <osSemaphoreAcquire+0xa0>)
 8002246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	e010      	b.n	8002278 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	6938      	ldr	r0, [r7, #16]
 800225a:	f000 fe07 	bl	8002e6c <xQueueSemaphoreTake>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d009      	beq.n	8002278 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800226a:	f06f 0301 	mvn.w	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e002      	b.n	8002278 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002272:	f06f 0302 	mvn.w	r3, #2
 8002276:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002278:	697b      	ldr	r3, [r7, #20]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000ed04 	.word	0xe000ed04

08002288 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800229e:	f06f 0303 	mvn.w	r3, #3
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e02c      	b.n	8002300 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01a      	beq.n	80022e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	6938      	ldr	r0, [r7, #16]
 80022be:	f000 fc63 	bl	8002b88 <xQueueGiveFromISR>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d003      	beq.n	80022d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80022c8:	f06f 0302 	mvn.w	r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e017      	b.n	8002300 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <osSemaphoreRelease+0x78>
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <osSemaphoreRelease+0x84>)
 80022d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	e00b      	b.n	8002300 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	6938      	ldr	r0, [r7, #16]
 80022f0:	f000 faaa 	bl	8002848 <xQueueGenericSend>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d002      	beq.n	8002300 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80022fa:	f06f 0302 	mvn.w	r3, #2
 80022fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002300:	697b      	ldr	r3, [r7, #20]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000ed04 	.word	0xe000ed04

08002310 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a07      	ldr	r2, [pc, #28]	@ (800233c <vApplicationGetIdleTaskMemory+0x2c>)
 8002320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a06      	ldr	r2, [pc, #24]	@ (8002340 <vApplicationGetIdleTaskMemory+0x30>)
 8002326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200000e8 	.word	0x200000e8
 8002340:	20000190 	.word	0x20000190

08002344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <vApplicationGetTimerTaskMemory+0x2c>)
 8002354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4a06      	ldr	r2, [pc, #24]	@ (8002374 <vApplicationGetTimerTaskMemory+0x30>)
 800235a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	20000390 	.word	0x20000390
 8002374:	20000438 	.word	0x20000438

08002378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f103 0208 	add.w	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f103 0208 	add.w	r2, r3, #8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 0208 	add.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d103      	bne.n	800243a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e00c      	b.n	8002454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3308      	adds	r3, #8
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e002      	b.n	8002448 <vListInsert+0x2e>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	d2f6      	bcs.n	8002442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6852      	ldr	r2, [r2, #4]
 80024ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d103      	bne.n	80024c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800250c:	f002 fcdc 	bl	8004ec8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	441a      	add	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	3b01      	subs	r3, #1
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	441a      	add	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	22ff      	movs	r2, #255	@ 0xff
 8002550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	22ff      	movs	r2, #255	@ 0xff
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d114      	bne.n	800258c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01a      	beq.n	80025a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3310      	adds	r3, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f001 fc74 	bl	8003e5c <xTaskRemoveFromEventList>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <xQueueGenericReset+0xd0>)
 800257c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	e009      	b.n	80025a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3310      	adds	r3, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fef1 	bl	8002378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3324      	adds	r3, #36	@ 0x24
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff feec 	bl	8002378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025a0:	f002 fcc4 	bl	8004f2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000ed04 	.word	0xe000ed04

080025b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08e      	sub	sp, #56	@ 0x38
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	e7fd      	b.n	80025fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <xQueueGenericCreateStatic+0x56>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <xQueueGenericCreateStatic+0x5a>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericCreateStatic+0x5c>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	623b      	str	r3, [r7, #32]
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <xQueueGenericCreateStatic+0x84>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <xQueueGenericCreateStatic+0x88>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <xQueueGenericCreateStatic+0x8a>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10b      	bne.n	800265a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	61fb      	str	r3, [r7, #28]
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800265a:	2350      	movs	r3, #80	@ 0x50
 800265c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b50      	cmp	r3, #80	@ 0x50
 8002662:	d00b      	beq.n	800267c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61bb      	str	r3, [r7, #24]
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800267c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002690:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f840 	bl	8002724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3730      	adds	r7, #48	@ 0x30
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08a      	sub	sp, #40	@ 0x28
 80026b2:	af02      	add	r7, sp, #8
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <xQueueGenericCreate+0x2c>
	__asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	613b      	str	r3, [r7, #16]
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	e7fd      	b.n	80026d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3350      	adds	r3, #80	@ 0x50
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fd0f 	bl	800510c <pvPortMalloc>
 80026ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d011      	beq.n	800271a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3350      	adds	r3, #80	@ 0x50
 80026fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f805 	bl	8002724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800271a:	69bb      	ldr	r3, [r7, #24]
	}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e002      	b.n	8002746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002752:	2101      	movs	r1, #1
 8002754:	69b8      	ldr	r0, [r7, #24]
 8002756:	f7ff fec3 	bl	80024e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08a      	sub	sp, #40	@ 0x28
 800276e:	af02      	add	r7, sp, #8
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	61bb      	str	r3, [r7, #24]
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d90b      	bls.n	80027b4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	617b      	str	r3, [r7, #20]
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80027b4:	2302      	movs	r3, #2
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fef8 	bl	80025b4 <xQueueGenericCreateStatic>
 80027c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80027d2:	69fb      	ldr	r3, [r7, #28]
	}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	613b      	str	r3, [r7, #16]
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d90b      	bls.n	8002824 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002824:	2202      	movs	r2, #2
 8002826:	2100      	movs	r1, #0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff40 	bl	80026ae <xQueueGenericCreate>
 800282e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800283c:	697b      	ldr	r3, [r7, #20]
	}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08e      	sub	sp, #56	@ 0x38
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <xQueueGenericSend+0x34>
	__asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <xQueueGenericSend+0x42>
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericSend+0x46>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericSend+0x48>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <xQueueGenericSend+0x64>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d103      	bne.n	80028ba <xQueueGenericSend+0x72>
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <xQueueGenericSend+0x76>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericSend+0x78>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <xQueueGenericSend+0x94>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	623b      	str	r3, [r7, #32]
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028dc:	f001 fc84 	bl	80041e8 <xTaskGetSchedulerState>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <xQueueGenericSend+0xa4>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <xQueueGenericSend+0xa8>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <xQueueGenericSend+0xaa>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <xQueueGenericSend+0xc6>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61fb      	str	r3, [r7, #28]
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800290e:	f002 fadb 	bl	8004ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <xQueueGenericSend+0xdc>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d129      	bne.n	8002978 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800292a:	f000 fc6d 	bl	8003208 <prvCopyDataToQueue>
 800292e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	3324      	adds	r3, #36	@ 0x24
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fa8d 	bl	8003e5c <xTaskRemoveFromEventList>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002948:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <xQueueGenericSend+0x200>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e00a      	b.n	8002970 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <xQueueGenericSend+0x200>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002970:	f002 fadc 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	e063      	b.n	8002a40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800297e:	f002 fad5 	bl	8004f2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002982:	2300      	movs	r3, #0
 8002984:	e05c      	b.n	8002a40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fac7 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800299a:	f002 fac7 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800299e:	f001 f82f 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029a2:	f002 fa91 	bl	8004ec8 <vPortEnterCritical>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d103      	bne.n	80029bc <xQueueGenericSend+0x174>
 80029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSend+0x18a>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029d2:	f002 faab 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029d6:	1d3a      	adds	r2, r7, #4
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fab6 	bl	8003f50 <xTaskCheckForTimeOut>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d124      	bne.n	8002a34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ec:	f000 fd04 	bl	80033f8 <prvIsQueueFull>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f8:	3310      	adds	r3, #16
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f9da 	bl	8003db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a06:	f000 fc8f 	bl	8003328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a0a:	f001 f807 	bl	8003a1c <xTaskResumeAll>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f af7c 	bne.w	800290e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <xQueueGenericSend+0x200>)
 8002a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	e772      	b.n	800290e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a2a:	f000 fc7d 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a2e:	f000 fff5 	bl	8003a1c <xTaskResumeAll>
 8002a32:	e76c      	b.n	800290e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a36:	f000 fc77 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a3a:	f000 ffef 	bl	8003a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3738      	adds	r7, #56	@ 0x38
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b090      	sub	sp, #64	@ 0x40
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <xQueueGenericSendFromISR+0x3e>
 8002a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <xQueueGenericSendFromISR+0x42>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericSendFromISR+0x44>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSendFromISR+0x6e>
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericSendFromISR+0x72>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericSendFromISR+0x74>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	623b      	str	r3, [r7, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002adc:	f002 fad4 	bl	8005088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ae0:	f3ef 8211 	mrs	r2, BASEPRI
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002af8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <xQueueGenericSendFromISR+0xc2>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d12f      	bne.n	8002b6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b24:	f000 fb70 	bl	8003208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d112      	bne.n	8002b58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	3324      	adds	r3, #36	@ 0x24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f98c 	bl	8003e5c <xTaskRemoveFromEventList>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b6c:	e001      	b.n	8002b72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3740      	adds	r7, #64	@ 0x40
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	@ 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	623b      	str	r3, [r7, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	61fb      	str	r3, [r7, #28]
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <xQueueGiveFromISR+0x5c>
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <xQueueGiveFromISR+0x60>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <xQueueGiveFromISR+0x62>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10b      	bne.n	8002c06 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	61bb      	str	r3, [r7, #24]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c06:	f002 fa3f 	bl	8005088 <vPortValidateInterruptPriority>
	__asm volatile
 8002c0a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	617a      	str	r2, [r7, #20]
 8002c20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002c22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d22b      	bcs.n	8002c8e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d112      	bne.n	8002c78 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5c:	3324      	adds	r3, #36	@ 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f8fc 	bl	8003e5c <xTaskRemoveFromEventList>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00e      	beq.n	8002c88 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8c:	e001      	b.n	8002c92 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f383 8811 	msr	BASEPRI, r3
}
 8002c9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3738      	adds	r7, #56	@ 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	@ 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <xQueueReceive+0x32>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	623b      	str	r3, [r7, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	e7fd      	b.n	8002cd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <xQueueReceive+0x40>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xQueueReceive+0x44>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <xQueueReceive+0x46>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <xQueueReceive+0x62>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61fb      	str	r3, [r7, #28]
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d0a:	f001 fa6d 	bl	80041e8 <xTaskGetSchedulerState>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <xQueueReceive+0x72>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <xQueueReceive+0x76>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueReceive+0x78>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <xQueueReceive+0x94>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	61bb      	str	r3, [r7, #24]
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d3c:	f002 f8c4 	bl	8004ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01f      	beq.n	8002d8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d50:	f000 fac4 	bl	80032dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00f      	beq.n	8002d84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	3310      	adds	r3, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f877 	bl	8003e5c <xTaskRemoveFromEventList>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d74:	4b3c      	ldr	r3, [pc, #240]	@ (8002e68 <xQueueReceive+0x1c0>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d84:	f002 f8d2 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e069      	b.n	8002e60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d92:	f002 f8cb 	bl	8004f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e062      	b.n	8002e60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 f8bd 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dae:	f002 f8bd 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db2:	f000 fe25 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db6:	f002 f887 	bl	8004ec8 <vPortEnterCritical>
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d103      	bne.n	8002dd0 <xQueueReceive+0x128>
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d103      	bne.n	8002de6 <xQueueReceive+0x13e>
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002de6:	f002 f8a1 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 f8ac 	bl	8003f50 <xTaskCheckForTimeOut>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d123      	bne.n	8002e46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e00:	f000 fae4 	bl	80033cc <prvIsQueueEmpty>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	3324      	adds	r3, #36	@ 0x24
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 ffd0 	bl	8003db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e1a:	f000 fa85 	bl	8003328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e1e:	f000 fdfd 	bl	8003a1c <xTaskResumeAll>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d189      	bne.n	8002d3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <xQueueReceive+0x1c0>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	e780      	b.n	8002d3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e3c:	f000 fa74 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e40:	f000 fdec 	bl	8003a1c <xTaskResumeAll>
 8002e44:	e77a      	b.n	8002d3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e48:	f000 fa6e 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e4c:	f000 fde6 	bl	8003a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e52:	f000 fabb 	bl	80033cc <prvIsQueueEmpty>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f43f af6f 	beq.w	8002d3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3730      	adds	r7, #48	@ 0x30
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	@ 0x38
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	623b      	str	r3, [r7, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec0:	f001 f992 	bl	80041e8 <xTaskGetSchedulerState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <xQueueSemaphoreTake+0x64>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueSemaphoreTake+0x68>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <xQueueSemaphoreTake+0x6a>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	61bb      	str	r3, [r7, #24]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef2:	f001 ffe9 	bl	8004ec8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d024      	beq.n	8002f4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f12:	f001 fae3 	bl	80044dc <pvTaskIncrementMutexHeldCount>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00f      	beq.n	8002f44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f26:	3310      	adds	r3, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 ff97 	bl	8003e5c <xTaskRemoveFromEventList>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f34:	4b54      	ldr	r3, [pc, #336]	@ (8003088 <xQueueSemaphoreTake+0x21c>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f44:	f001 fff2 	bl	8004f2c <vPortExitCritical>
				return pdPASS;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e098      	b.n	800307e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	617b      	str	r3, [r7, #20]
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f70:	f001 ffdc 	bl	8004f2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e082      	b.n	800307e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 ffce 	bl	8003f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f8c:	f001 ffce 	bl	8004f2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f90:	f000 fd36 	bl	8003a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f94:	f001 ff98 	bl	8004ec8 <vPortEnterCritical>
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d103      	bne.n	8002fae <xQueueSemaphoreTake+0x142>
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d103      	bne.n	8002fc4 <xQueueSemaphoreTake+0x158>
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fc4:	f001 ffb2 	bl	8004f2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fc8:	463a      	mov	r2, r7
 8002fca:	f107 030c 	add.w	r3, r7, #12
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 ffbd 	bl	8003f50 <xTaskCheckForTimeOut>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d132      	bne.n	8003042 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fde:	f000 f9f5 	bl	80033cc <prvIsQueueEmpty>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d026      	beq.n	8003036 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002ff0:	f001 ff6a 	bl	8004ec8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 f913 	bl	8004224 <xTaskPriorityInherit>
 8002ffe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003000:	f001 ff94 	bl	8004f2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	3324      	adds	r3, #36	@ 0x24
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fed3 	bl	8003db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003014:	f000 f988 	bl	8003328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003018:	f000 fd00 	bl	8003a1c <xTaskResumeAll>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	f47f af67 	bne.w	8002ef2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003024:	4b18      	ldr	r3, [pc, #96]	@ (8003088 <xQueueSemaphoreTake+0x21c>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	e75d      	b.n	8002ef2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003038:	f000 f976 	bl	8003328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800303c:	f000 fcee 	bl	8003a1c <xTaskResumeAll>
 8003040:	e757      	b.n	8002ef2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003044:	f000 f970 	bl	8003328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003048:	f000 fce8 	bl	8003a1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800304c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800304e:	f000 f9bd 	bl	80033cc <prvIsQueueEmpty>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f43f af4c 	beq.w	8002ef2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003060:	f001 ff32 	bl	8004ec8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003064:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003066:	f000 f8b7 	bl	80031d8 <prvGetDisinheritPriorityAfterTimeout>
 800306a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f9ae 	bl	80043d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003078:	f001 ff58 	bl	8004f2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800307c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800307e:	4618      	mov	r0, r3
 8003080:	3738      	adds	r7, #56	@ 0x38
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	@ 0x38
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	623b      	str	r3, [r7, #32]
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	e7fd      	b.n	80030b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <xQueueReceiveFromISR+0x3c>
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <xQueueReceiveFromISR+0x40>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <xQueueReceiveFromISR+0x42>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61fb      	str	r3, [r7, #28]
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ea:	f001 ffcd 	bl	8005088 <vPortValidateInterruptPriority>
	__asm volatile
 80030ee:	f3ef 8211 	mrs	r2, BASEPRI
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	61ba      	str	r2, [r7, #24]
 8003104:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003106:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02f      	beq.n	8003176 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800311c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003124:	f000 f8da 	bl	80032dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	1e5a      	subs	r2, r3, #1
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003130:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d112      	bne.n	8003160 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	3310      	adds	r3, #16
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fe88 	bl	8003e5c <xTaskRemoveFromEventList>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e007      	b.n	8003170 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003164:	3301      	adds	r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	b25a      	sxtb	r2, r3
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003170:	2301      	movs	r3, #1
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
 8003174:	e001      	b.n	800317a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f383 8811 	msr	BASEPRI, r3
}
 8003184:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003188:	4618      	mov	r0, r3
 800318a:	3738      	adds	r7, #56	@ 0x38
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <vQueueDelete+0x2a>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	60bb      	str	r3, [r7, #8]
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	e7fd      	b.n	80031b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f95e 	bl	800347c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f002 f86c 	bl	80052a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e001      	b.n	80031fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031fa:	68fb      	ldr	r3, [r7, #12]
	}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d14d      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f85e 	bl	80042f4 <xTaskPriorityDisinherit>
 8003238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e043      	b.n	80032ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d119      	bne.n	800327c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6858      	ldr	r0, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	461a      	mov	r2, r3
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	f002 f9cc 	bl	80055f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d32b      	bcc.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e026      	b.n	80032ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68d8      	ldr	r0, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	461a      	mov	r2, r3
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	f002 f9b2 	bl	80055f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	425b      	negs	r3, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	425b      	negs	r3, r3
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d105      	bne.n	80032ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d018      	beq.n	8003320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	441a      	add	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d303      	bcc.n	8003310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	461a      	mov	r2, r3
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f002 f968 	bl	80055f0 <memcpy>
	}
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003330:	f001 fdca 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800333a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800333c:	e011      	b.n	8003362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3324      	adds	r3, #36	@ 0x24
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fd86 	bl	8003e5c <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003356:	f000 fe5f 	bl	8004018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3b01      	subs	r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	dce9      	bgt.n	800333e <prvUnlockQueue+0x16>
 800336a:	e000      	b.n	800336e <prvUnlockQueue+0x46>
					break;
 800336c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	22ff      	movs	r2, #255	@ 0xff
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003376:	f001 fdd9 	bl	8004f2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800337a:	f001 fda5 	bl	8004ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003386:	e011      	b.n	80033ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3310      	adds	r3, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd61 	bl	8003e5c <xTaskRemoveFromEventList>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033a0:	f000 fe3a 	bl	8004018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dce9      	bgt.n	8003388 <prvUnlockQueue+0x60>
 80033b4:	e000      	b.n	80033b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	22ff      	movs	r2, #255	@ 0xff
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033c0:	f001 fdb4 	bl	8004f2c <vPortExitCritical>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d4:	f001 fd78 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e001      	b.n	80033ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fd9f 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003400:	f001 fd62 	bl	8004ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e001      	b.n	800341a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341a:	f001 fd87 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e014      	b.n	8003462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003438:	4a0f      	ldr	r2, [pc, #60]	@ (8003478 <vQueueAddToRegistry+0x50>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003444:	490c      	ldr	r1, [pc, #48]	@ (8003478 <vQueueAddToRegistry+0x50>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <vQueueAddToRegistry+0x50>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800345a:	e006      	b.n	800346a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d9e7      	bls.n	8003438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000838 	.word	0x20000838

0800347c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e016      	b.n	80034b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800348a:	4a10      	ldr	r2, [pc, #64]	@ (80034cc <vQueueUnregisterQueue+0x50>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d10b      	bne.n	80034b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800349a:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <vQueueUnregisterQueue+0x50>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2100      	movs	r1, #0
 80034a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80034a4:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <vQueueUnregisterQueue+0x50>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	2200      	movs	r2, #0
 80034ae:	605a      	str	r2, [r3, #4]
				break;
 80034b0:	e006      	b.n	80034c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d9e5      	bls.n	800348a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000838 	.word	0x20000838

080034d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034e0:	f001 fcf2 	bl	8004ec8 <vPortEnterCritical>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d103      	bne.n	80034fa <vQueueWaitForMessageRestricted+0x2a>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d103      	bne.n	8003510 <vQueueWaitForMessageRestricted+0x40>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003510:	f001 fd0c 	bl	8004f2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3324      	adds	r3, #36	@ 0x24
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fc6d 	bl	8003e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff fefc 	bl	8003328 <prvUnlockQueue>
	}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	@ 0x38
 800353c:	af04      	add	r7, sp, #16
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <xTaskCreateStatic+0x2c>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	623b      	str	r3, [r7, #32]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <xTaskCreateStatic+0x4a>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	61fb      	str	r3, [r7, #28]
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	e7fd      	b.n	800357e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003582:	23a8      	movs	r3, #168	@ 0xa8
 8003584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2ba8      	cmp	r3, #168	@ 0xa8
 800358a:	d00b      	beq.n	80035a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	61bb      	str	r3, [r7, #24]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01e      	beq.n	80035ea <xTaskCreateStatic+0xb2>
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01b      	beq.n	80035ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035c4:	2300      	movs	r3, #0
 80035c6:	9303      	str	r3, [sp, #12]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	9302      	str	r3, [sp, #8]
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f851 	bl	8003684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035e4:	f000 f8f6 	bl	80037d4 <prvAddNewTaskToReadyList>
 80035e8:	e001      	b.n	80035ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ee:	697b      	ldr	r3, [r7, #20]
	}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	@ 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	@ 0x30
 80035fc:	af04      	add	r7, sp, #16
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fd7d 	bl	800510c <pvPortMalloc>
 8003612:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00e      	beq.n	8003638 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800361a:	20a8      	movs	r0, #168	@ 0xa8
 800361c:	f001 fd76 	bl	800510c <pvPortMalloc>
 8003620:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
 800362e:	e005      	b.n	800363c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f001 fe39 	bl	80052a8 <vPortFree>
 8003636:	e001      	b.n	800363c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d017      	beq.n	8003672 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	2300      	movs	r3, #0
 800364e:	9303      	str	r3, [sp, #12]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	9302      	str	r3, [sp, #8]
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f80f 	bl	8003684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003666:	69f8      	ldr	r0, [r7, #28]
 8003668:	f000 f8b4 	bl	80037d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800366c:	2301      	movs	r3, #1
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e002      	b.n	8003678 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003678:	69bb      	ldr	r3, [r7, #24]
	}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	461a      	mov	r2, r3
 800369c:	21a5      	movs	r1, #165	@ 0xa5
 800369e:	f001 ff23 	bl	80054e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ac:	3b01      	subs	r3, #1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	617b      	str	r3, [r7, #20]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01f      	beq.n	8003724 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e012      	b.n	8003710 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	7819      	ldrb	r1, [r3, #0]
 80036f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	3334      	adds	r3, #52	@ 0x34
 80036fa:	460a      	mov	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3301      	adds	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d9e9      	bls.n	80036ea <prvInitialiseNewTask+0x66>
 8003716:	e000      	b.n	800371a <prvInitialiseNewTask+0x96>
			{
				break;
 8003718:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003722:	e003      	b.n	800372c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372e:	2b37      	cmp	r3, #55	@ 0x37
 8003730:	d901      	bls.n	8003736 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003732:	2337      	movs	r3, #55	@ 0x37
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800373a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003740:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fe33 	bl	80023b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	3318      	adds	r3, #24
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fe2e 	bl	80023b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	2200      	movs	r2, #0
 800377e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	3354      	adds	r3, #84	@ 0x54
 8003786:	224c      	movs	r2, #76	@ 0x4c
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 feac 	bl	80054e8 <memset>
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <prvInitialiseNewTask+0x144>)
 8003794:	659a      	str	r2, [r3, #88]	@ 0x58
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <prvInitialiseNewTask+0x148>)
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <prvInitialiseNewTask+0x14c>)
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68f9      	ldr	r1, [r7, #12]
 80037a6:	69b8      	ldr	r0, [r7, #24]
 80037a8:	f001 fa5a 	bl	8004c60 <pxPortInitialiseStack>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037be:	bf00      	nop
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20001acc 	.word	0x20001acc
 80037cc:	20001b34 	.word	0x20001b34
 80037d0:	20001b9c 	.word	0x20001b9c

080037d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037dc:	f001 fb74 	bl	8004ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003898 <prvAddNewTaskToReadyList+0xc4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003898 <prvAddNewTaskToReadyList+0xc4>)
 80037e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ea:	4b2c      	ldr	r3, [pc, #176]	@ (800389c <prvAddNewTaskToReadyList+0xc8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037f2:	4a2a      	ldr	r2, [pc, #168]	@ (800389c <prvAddNewTaskToReadyList+0xc8>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <prvAddNewTaskToReadyList+0xc4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d110      	bne.n	8003822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003800:	f000 fc2e 	bl	8004060 <prvInitialiseTaskLists>
 8003804:	e00d      	b.n	8003822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003806:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <prvAddNewTaskToReadyList+0xcc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800380e:	4b23      	ldr	r3, [pc, #140]	@ (800389c <prvAddNewTaskToReadyList+0xc8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	429a      	cmp	r2, r3
 800381a:	d802      	bhi.n	8003822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800381c:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <prvAddNewTaskToReadyList+0xc8>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <prvAddNewTaskToReadyList+0xd0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <prvAddNewTaskToReadyList+0xd0>)
 800382a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800382c:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <prvAddNewTaskToReadyList+0xd0>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <prvAddNewTaskToReadyList+0xd4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d903      	bls.n	8003848 <prvAddNewTaskToReadyList+0x74>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <prvAddNewTaskToReadyList+0xd4>)
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <prvAddNewTaskToReadyList+0xd8>)
 8003856:	441a      	add	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7fe fdb7 	bl	80023d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003864:	f001 fb62 	bl	8004f2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003868:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <prvAddNewTaskToReadyList+0xcc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <prvAddNewTaskToReadyList+0xc8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d207      	bcs.n	800388e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800387e:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <prvAddNewTaskToReadyList+0xdc>)
 8003880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000d4c 	.word	0x20000d4c
 800389c:	20000878 	.word	0x20000878
 80038a0:	20000d58 	.word	0x20000d58
 80038a4:	20000d68 	.word	0x20000d68
 80038a8:	20000d54 	.word	0x20000d54
 80038ac:	2000087c 	.word	0x2000087c
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038c6:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <vTaskDelay+0x64>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <vTaskDelay+0x32>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60bb      	str	r3, [r7, #8]
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038e6:	f000 f88b 	bl	8003a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038ea:	2100      	movs	r1, #0
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fe09 	bl	8004504 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038f2:	f000 f893 	bl	8003a1c <xTaskResumeAll>
 80038f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038fe:	4b07      	ldr	r3, [pc, #28]	@ (800391c <vTaskDelay+0x68>)
 8003900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000d74 	.word	0x20000d74
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	@ 0x28
 8003924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800392e:	463a      	mov	r2, r7
 8003930:	1d39      	adds	r1, r7, #4
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fcea 	bl	8002310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	9202      	str	r2, [sp, #8]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	460a      	mov	r2, r1
 800394e:	4924      	ldr	r1, [pc, #144]	@ (80039e0 <vTaskStartScheduler+0xc0>)
 8003950:	4824      	ldr	r0, [pc, #144]	@ (80039e4 <vTaskStartScheduler+0xc4>)
 8003952:	f7ff fdf1 	bl	8003538 <xTaskCreateStatic>
 8003956:	4603      	mov	r3, r0
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <vTaskStartScheduler+0xc8>)
 800395a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <vTaskStartScheduler+0xc8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e001      	b.n	800396e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003974:	f000 fe1a 	bl	80045ac <xTimerCreateTimerTask>
 8003978:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d11b      	bne.n	80039b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003994:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <vTaskStartScheduler+0xcc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3354      	adds	r3, #84	@ 0x54
 800399a:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <vTaskStartScheduler+0xd0>)
 800399c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <vTaskStartScheduler+0xd4>)
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039a6:	4b14      	ldr	r3, [pc, #80]	@ (80039f8 <vTaskStartScheduler+0xd8>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039ac:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <vTaskStartScheduler+0xdc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039b2:	f001 f9e5 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039b6:	e00f      	b.n	80039d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d10b      	bne.n	80039d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <vTaskStartScheduler+0xb4>
}
 80039d8:	bf00      	nop
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	08005728 	.word	0x08005728
 80039e4:	08004031 	.word	0x08004031
 80039e8:	20000d70 	.word	0x20000d70
 80039ec:	20000878 	.word	0x20000878
 80039f0:	20000014 	.word	0x20000014
 80039f4:	20000d6c 	.word	0x20000d6c
 80039f8:	20000d58 	.word	0x20000d58
 80039fc:	20000d50 	.word	0x20000d50

08003a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <vTaskSuspendAll+0x18>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <vTaskSuspendAll+0x18>)
 8003a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	20000d74 	.word	0x20000d74

08003a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a2a:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <xTaskResumeAll+0x118>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <xTaskResumeAll+0x2e>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	603b      	str	r3, [r7, #0]
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a4a:	f001 fa3d 	bl	8004ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a4e:	4b39      	ldr	r3, [pc, #228]	@ (8003b34 <xTaskResumeAll+0x118>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	4a37      	ldr	r2, [pc, #220]	@ (8003b34 <xTaskResumeAll+0x118>)
 8003a56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a58:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <xTaskResumeAll+0x118>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d162      	bne.n	8003b26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a60:	4b35      	ldr	r3, [pc, #212]	@ (8003b38 <xTaskResumeAll+0x11c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05e      	beq.n	8003b26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a68:	e02f      	b.n	8003aca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a6a:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <xTaskResumeAll+0x120>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3318      	adds	r3, #24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fd08 	bl	800248c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fd03 	bl	800248c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <xTaskResumeAll+0x124>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d903      	bls.n	8003a9a <xTaskResumeAll+0x7e>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <xTaskResumeAll+0x124>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4a27      	ldr	r2, [pc, #156]	@ (8003b44 <xTaskResumeAll+0x128>)
 8003aa8:	441a      	add	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f7fe fc8e 	bl	80023d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aba:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <xTaskResumeAll+0x12c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <xTaskResumeAll+0x130>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aca:	4b1c      	ldr	r3, [pc, #112]	@ (8003b3c <xTaskResumeAll+0x120>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1cb      	bne.n	8003a6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ad8:	f000 fb66 	bl	80041a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003adc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <xTaskResumeAll+0x134>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ae8:	f000 f846 	bl	8003b78 <xTaskIncrementTick>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <xTaskResumeAll+0x130>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f1      	bne.n	8003ae8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <xTaskResumeAll+0x134>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <xTaskResumeAll+0x130>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <xTaskResumeAll+0x138>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b26:	f001 fa01 	bl	8004f2c <vPortExitCritical>

	return xAlreadyYielded;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000d74 	.word	0x20000d74
 8003b38:	20000d4c 	.word	0x20000d4c
 8003b3c:	20000d0c 	.word	0x20000d0c
 8003b40:	20000d54 	.word	0x20000d54
 8003b44:	2000087c 	.word	0x2000087c
 8003b48:	20000878 	.word	0x20000878
 8003b4c:	20000d60 	.word	0x20000d60
 8003b50:	20000d5c 	.word	0x20000d5c
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b5e:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <xTaskGetTickCount+0x1c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b64:	687b      	ldr	r3, [r7, #4]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000d50 	.word	0x20000d50

08003b78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b82:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc0 <xTaskIncrementTick+0x148>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 8090 	bne.w	8003cac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc4 <xTaskIncrementTick+0x14c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b94:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc4 <xTaskIncrementTick+0x14c>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d121      	bne.n	8003be4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ba0:	4b49      	ldr	r3, [pc, #292]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xTaskIncrementTick+0x46>
 8003bc2:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	4b40      	ldr	r3, [pc, #256]	@ (8003ccc <xTaskIncrementTick+0x154>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <xTaskIncrementTick+0x154>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd0 <xTaskIncrementTick+0x158>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd0 <xTaskIncrementTick+0x158>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	f000 fae2 	bl	80041a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003be4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <xTaskIncrementTick+0x15c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d349      	bcc.n	8003c82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bee:	4b36      	ldr	r3, [pc, #216]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf8:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <xTaskIncrementTick+0x15c>)
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	601a      	str	r2, [r3, #0]
					break;
 8003c00:	e03f      	b.n	8003c82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <xTaskIncrementTick+0x150>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d203      	bcs.n	8003c22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <xTaskIncrementTick+0x15c>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c20:	e02f      	b.n	8003c82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fc30 	bl	800248c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3318      	adds	r3, #24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fc27 	bl	800248c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c42:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <xTaskIncrementTick+0x160>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d903      	bls.n	8003c52 <xTaskIncrementTick+0xda>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <xTaskIncrementTick+0x160>)
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <xTaskIncrementTick+0x164>)
 8003c60:	441a      	add	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f7fe fbb2 	bl	80023d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <xTaskIncrementTick+0x168>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d3b8      	bcc.n	8003bee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c80:	e7b5      	b.n	8003bee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c82:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <xTaskIncrementTick+0x168>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c88:	4914      	ldr	r1, [pc, #80]	@ (8003cdc <xTaskIncrementTick+0x164>)
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d901      	bls.n	8003c9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <xTaskIncrementTick+0x16c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	e004      	b.n	8003cb6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <xTaskIncrementTick+0x170>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce8 <xTaskIncrementTick+0x170>)
 8003cb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cb6:	697b      	ldr	r3, [r7, #20]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000d74 	.word	0x20000d74
 8003cc4:	20000d50 	.word	0x20000d50
 8003cc8:	20000d04 	.word	0x20000d04
 8003ccc:	20000d08 	.word	0x20000d08
 8003cd0:	20000d64 	.word	0x20000d64
 8003cd4:	20000d6c 	.word	0x20000d6c
 8003cd8:	20000d54 	.word	0x20000d54
 8003cdc:	2000087c 	.word	0x2000087c
 8003ce0:	20000878 	.word	0x20000878
 8003ce4:	20000d60 	.word	0x20000d60
 8003ce8:	20000d5c 	.word	0x20000d5c

08003cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8003da0 <vTaskSwitchContext+0xb4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <vTaskSwitchContext+0xb8>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d00:	e047      	b.n	8003d92 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003d02:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <vTaskSwitchContext+0xb8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <vTaskSwitchContext+0xbc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e011      	b.n	8003d34 <vTaskSwitchContext+0x48>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <vTaskSwitchContext+0x42>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	607b      	str	r3, [r7, #4]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <vTaskSwitchContext+0x3e>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	491d      	ldr	r1, [pc, #116]	@ (8003dac <vTaskSwitchContext+0xc0>)
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0e3      	beq.n	8003d10 <vTaskSwitchContext+0x24>
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <vTaskSwitchContext+0xc0>)
 8003d54:	4413      	add	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d104      	bne.n	8003d78 <vTaskSwitchContext+0x8c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003db0 <vTaskSwitchContext+0xc4>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4a09      	ldr	r2, [pc, #36]	@ (8003da8 <vTaskSwitchContext+0xbc>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d88:	4b09      	ldr	r3, [pc, #36]	@ (8003db0 <vTaskSwitchContext+0xc4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3354      	adds	r3, #84	@ 0x54
 8003d8e:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <vTaskSwitchContext+0xc8>)
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000d74 	.word	0x20000d74
 8003da4:	20000d60 	.word	0x20000d60
 8003da8:	20000d54 	.word	0x20000d54
 8003dac:	2000087c 	.word	0x2000087c
 8003db0:	20000878 	.word	0x20000878
 8003db4:	20000014 	.word	0x20000014

08003db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60fb      	str	r3, [r7, #12]
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de0:	4b07      	ldr	r3, [pc, #28]	@ (8003e00 <vTaskPlaceOnEventList+0x48>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3318      	adds	r3, #24
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe fb16 	bl	800241a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dee:	2101      	movs	r1, #1
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f000 fb87 	bl	8004504 <prvAddCurrentTaskToDelayedList>
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000878 	.word	0x20000878

08003e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4619      	mov	r1, r3
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fe facb 	bl	80023d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 fb5a 	bl	8004504 <prvAddCurrentTaskToDelayedList>
	}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000878 	.word	0x20000878

08003e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60fb      	str	r3, [r7, #12]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fafc 	bl	800248c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e94:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <xTaskRemoveFromEventList+0xb0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11d      	bne.n	8003ed8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe faf3 	bl	800248c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eaa:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <xTaskRemoveFromEventList+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d903      	bls.n	8003eba <xTaskRemoveFromEventList+0x5e>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a16      	ldr	r2, [pc, #88]	@ (8003f10 <xTaskRemoveFromEventList+0xb4>)
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a13      	ldr	r2, [pc, #76]	@ (8003f14 <xTaskRemoveFromEventList+0xb8>)
 8003ec8:	441a      	add	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fa7e 	bl	80023d2 <vListInsertEnd>
 8003ed6:	e005      	b.n	8003ee4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3318      	adds	r3, #24
 8003edc:	4619      	mov	r1, r3
 8003ede:	480e      	ldr	r0, [pc, #56]	@ (8003f18 <xTaskRemoveFromEventList+0xbc>)
 8003ee0:	f7fe fa77 	bl	80023d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <xTaskRemoveFromEventList+0xc0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d905      	bls.n	8003efe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <xTaskRemoveFromEventList+0xc4>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e001      	b.n	8003f02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f02:	697b      	ldr	r3, [r7, #20]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000d74 	.word	0x20000d74
 8003f10:	20000d54 	.word	0x20000d54
 8003f14:	2000087c 	.word	0x2000087c
 8003f18:	20000d0c 	.word	0x20000d0c
 8003f1c:	20000878 	.word	0x20000878
 8003f20:	20000d60 	.word	0x20000d60

08003f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <vTaskInternalSetTimeOutState+0x24>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <vTaskInternalSetTimeOutState+0x28>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000d64 	.word	0x20000d64
 8003f4c:	20000d50 	.word	0x20000d50

08003f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	613b      	str	r3, [r7, #16]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	60fb      	str	r3, [r7, #12]
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	e7fd      	b.n	8003f92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f96:	f000 ff97 	bl	8004ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <xTaskCheckForTimeOut+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e023      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <xTaskCheckForTimeOut+0xc4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d007      	beq.n	8003fd6 <xTaskCheckForTimeOut+0x86>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e015      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20b      	bcs.n	8003ff8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff99 	bl	8003f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e004      	b.n	8004002 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f000 ff93 	bl	8004f2c <vPortExitCritical>

	return xReturn;
 8004006:	69fb      	ldr	r3, [r7, #28]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000d50 	.word	0x20000d50
 8004014:	20000d64 	.word	0x20000d64

08004018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800401c:	4b03      	ldr	r3, [pc, #12]	@ (800402c <vTaskMissedYield+0x14>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000d60 	.word	0x20000d60

08004030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004038:	f000 f852 	bl	80040e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <prvIdleTask+0x28>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d9f9      	bls.n	8004038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <prvIdleTask+0x2c>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004054:	e7f0      	b.n	8004038 <prvIdleTask+0x8>
 8004056:	bf00      	nop
 8004058:	2000087c 	.word	0x2000087c
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	e00c      	b.n	8004086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <prvInitialiseTaskLists+0x60>)
 8004078:	4413      	add	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe f97c 	bl	8002378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3301      	adds	r3, #1
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b37      	cmp	r3, #55	@ 0x37
 800408a:	d9ef      	bls.n	800406c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800408c:	480d      	ldr	r0, [pc, #52]	@ (80040c4 <prvInitialiseTaskLists+0x64>)
 800408e:	f7fe f973 	bl	8002378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004092:	480d      	ldr	r0, [pc, #52]	@ (80040c8 <prvInitialiseTaskLists+0x68>)
 8004094:	f7fe f970 	bl	8002378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004098:	480c      	ldr	r0, [pc, #48]	@ (80040cc <prvInitialiseTaskLists+0x6c>)
 800409a:	f7fe f96d 	bl	8002378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800409e:	480c      	ldr	r0, [pc, #48]	@ (80040d0 <prvInitialiseTaskLists+0x70>)
 80040a0:	f7fe f96a 	bl	8002378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040a4:	480b      	ldr	r0, [pc, #44]	@ (80040d4 <prvInitialiseTaskLists+0x74>)
 80040a6:	f7fe f967 	bl	8002378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <prvInitialiseTaskLists+0x78>)
 80040ac:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <prvInitialiseTaskLists+0x64>)
 80040ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <prvInitialiseTaskLists+0x7c>)
 80040b2:	4a05      	ldr	r2, [pc, #20]	@ (80040c8 <prvInitialiseTaskLists+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000087c 	.word	0x2000087c
 80040c4:	20000cdc 	.word	0x20000cdc
 80040c8:	20000cf0 	.word	0x20000cf0
 80040cc:	20000d0c 	.word	0x20000d0c
 80040d0:	20000d20 	.word	0x20000d20
 80040d4:	20000d38 	.word	0x20000d38
 80040d8:	20000d04 	.word	0x20000d04
 80040dc:	20000d08 	.word	0x20000d08

080040e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e6:	e019      	b.n	800411c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040e8:	f000 feee 	bl	8004ec8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ec:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <prvCheckTasksWaitingTermination+0x50>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f9c7 	bl	800248c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	4a0b      	ldr	r2, [pc, #44]	@ (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	4a0a      	ldr	r2, [pc, #40]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 8004110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004112:	f000 ff0b 	bl	8004f2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f810 	bl	800413c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e1      	bne.n	80040e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000d20 	.word	0x20000d20
 8004134:	20000d4c 	.word	0x20000d4c
 8004138:	20000d34 	.word	0x20000d34

0800413c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3354      	adds	r3, #84	@ 0x54
 8004148:	4618      	mov	r0, r3
 800414a:	f001 f9d5 	bl	80054f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	4618      	mov	r0, r3
 800415e:	f001 f8a3 	bl	80052a8 <vPortFree>
				vPortFree( pxTCB );
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 f8a0 	bl	80052a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004168:	e019      	b.n	800419e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004170:	2b01      	cmp	r3, #1
 8004172:	d103      	bne.n	800417c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f001 f897 	bl	80052a8 <vPortFree>
	}
 800417a:	e010      	b.n	800419e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004182:	2b02      	cmp	r3, #2
 8004184:	d00b      	beq.n	800419e <prvDeleteTCB+0x62>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60fb      	str	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <prvDeleteTCB+0x5e>
	}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ae:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <prvResetNextTaskUnblockTime+0x38>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <prvResetNextTaskUnblockTime+0x3c>)
 80041ba:	f04f 32ff 	mov.w	r2, #4294967295
 80041be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041c0:	e008      	b.n	80041d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c2:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <prvResetNextTaskUnblockTime+0x38>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <prvResetNextTaskUnblockTime+0x3c>)
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000d04 	.word	0x20000d04
 80041e4:	20000d6c 	.word	0x20000d6c

080041e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <xTaskGetSchedulerState+0x34>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041f6:	2301      	movs	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	e008      	b.n	800420e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <xTaskGetSchedulerState+0x38>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004204:	2302      	movs	r3, #2
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	e001      	b.n	800420e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800420e:	687b      	ldr	r3, [r7, #4]
	}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000d58 	.word	0x20000d58
 8004220:	20000d74 	.word	0x20000d74

08004224 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d051      	beq.n	80042de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423e:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <xTaskPriorityInherit+0xc4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d241      	bcs.n	80042cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db06      	blt.n	800425e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <xTaskPriorityInherit+0xc4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6959      	ldr	r1, [r3, #20]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ec <xTaskPriorityInherit+0xc8>)
 8004270:	4413      	add	r3, r2
 8004272:	4299      	cmp	r1, r3
 8004274:	d122      	bne.n	80042bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f906 	bl	800248c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004280:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <xTaskPriorityInherit+0xc4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <xTaskPriorityInherit+0xcc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d903      	bls.n	800429e <xTaskPriorityInherit+0x7a>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <xTaskPriorityInherit+0xcc>)
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4a10      	ldr	r2, [pc, #64]	@ (80042ec <xTaskPriorityInherit+0xc8>)
 80042ac:	441a      	add	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe f88c 	bl	80023d2 <vListInsertEnd>
 80042ba:	e004      	b.n	80042c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <xTaskPriorityInherit+0xc4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e008      	b.n	80042de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <xTaskPriorityInherit+0xc4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042de:	68fb      	ldr	r3, [r7, #12]
	}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20000878 	.word	0x20000878
 80042ec:	2000087c 	.word	0x2000087c
 80042f0:	20000d54 	.word	0x20000d54

080042f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d058      	beq.n	80043bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800430a:	4b2f      	ldr	r3, [pc, #188]	@ (80043c8 <xTaskPriorityDisinherit+0xd4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d00b      	beq.n	800432c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60bb      	str	r3, [r7, #8]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	429a      	cmp	r2, r3
 8004360:	d02c      	beq.n	80043bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	2b00      	cmp	r3, #0
 8004368:	d128      	bne.n	80043bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe f88c 	bl	800248c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	4b0f      	ldr	r3, [pc, #60]	@ (80043cc <xTaskPriorityDisinherit+0xd8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d903      	bls.n	800439c <xTaskPriorityDisinherit+0xa8>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	4a0c      	ldr	r2, [pc, #48]	@ (80043cc <xTaskPriorityDisinherit+0xd8>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a09      	ldr	r2, [pc, #36]	@ (80043d0 <xTaskPriorityDisinherit+0xdc>)
 80043aa:	441a      	add	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe f80d 	bl	80023d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000878 	.word	0x20000878
 80043cc:	20000d54 	.word	0x20000d54
 80043d0:	2000087c 	.word	0x2000087c

080043d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06c      	beq.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d902      	bls.n	800441c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e002      	b.n	8004422 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004420:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	429a      	cmp	r2, r3
 800442a:	d04c      	beq.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	429a      	cmp	r2, r3
 8004434:	d147      	bne.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004436:	4b26      	ldr	r3, [pc, #152]	@ (80044d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	429a      	cmp	r2, r3
 800443e:	d10b      	bne.n	8004458 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60bb      	str	r3, [r7, #8]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db04      	blt.n	8004476 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	6959      	ldr	r1, [r3, #20]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4a13      	ldr	r2, [pc, #76]	@ (80044d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004486:	4413      	add	r3, r2
 8004488:	4299      	cmp	r1, r3
 800448a:	d11c      	bne.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	3304      	adds	r3, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd fffb 	bl	800248c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449a:	4b0f      	ldr	r3, [pc, #60]	@ (80044d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d903      	bls.n	80044aa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	4a0c      	ldr	r2, [pc, #48]	@ (80044d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044b8:	441a      	add	r2, r3
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3304      	adds	r3, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7fd ff86 	bl	80023d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044c6:	bf00      	nop
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000878 	.word	0x20000878
 80044d4:	2000087c 	.word	0x2000087c
 80044d8:	20000d54 	.word	0x20000d54

080044dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80044e0:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <pvTaskIncrementMutexHeldCount+0x24>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <pvTaskIncrementMutexHeldCount+0x24>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044ee:	3201      	adds	r2, #1
 80044f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80044f2:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <pvTaskIncrementMutexHeldCount+0x24>)
 80044f4:	681b      	ldr	r3, [r3, #0]
	}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000878 	.word	0x20000878

08004504 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800450e:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <prvAddCurrentTaskToDelayedList+0x90>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004514:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x94>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3304      	adds	r3, #4
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd ffb6 	bl	800248c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d10a      	bne.n	800453e <prvAddCurrentTaskToDelayedList+0x3a>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452e:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x94>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4819      	ldr	r0, [pc, #100]	@ (800459c <prvAddCurrentTaskToDelayedList+0x98>)
 8004538:	f7fd ff4b 	bl	80023d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800453c:	e026      	b.n	800458c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x94>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	429a      	cmp	r2, r3
 8004554:	d209      	bcs.n	800456a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004556:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x94>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f7fd ff59 	bl	800241a <vListInsert>
}
 8004568:	e010      	b.n	800458c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456a:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <prvAddCurrentTaskToDelayedList+0x94>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7fd ff4f 	bl	800241a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d202      	bcs.n	800458c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004586:	4a08      	ldr	r2, [pc, #32]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000d50 	.word	0x20000d50
 8004598:	20000878 	.word	0x20000878
 800459c:	20000d38 	.word	0x20000d38
 80045a0:	20000d08 	.word	0x20000d08
 80045a4:	20000d04 	.word	0x20000d04
 80045a8:	20000d6c 	.word	0x20000d6c

080045ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045b6:	f000 fb13 	bl	8004be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <xTimerCreateTimerTask+0x84>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d021      	beq.n	8004606 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ca:	1d3a      	adds	r2, r7, #4
 80045cc:	f107 0108 	add.w	r1, r7, #8
 80045d0:	f107 030c 	add.w	r3, r7, #12
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd feb5 	bl	8002344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	9202      	str	r2, [sp, #8]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2302      	movs	r3, #2
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	460a      	mov	r2, r1
 80045ec:	4911      	ldr	r1, [pc, #68]	@ (8004634 <xTimerCreateTimerTask+0x88>)
 80045ee:	4812      	ldr	r0, [pc, #72]	@ (8004638 <xTimerCreateTimerTask+0x8c>)
 80045f0:	f7fe ffa2 	bl	8003538 <xTaskCreateStatic>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a11      	ldr	r2, [pc, #68]	@ (800463c <xTimerCreateTimerTask+0x90>)
 80045f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <xTimerCreateTimerTask+0x90>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004602:	2301      	movs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	613b      	str	r3, [r7, #16]
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004624:	697b      	ldr	r3, [r7, #20]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000da8 	.word	0x20000da8
 8004634:	08005730 	.word	0x08005730
 8004638:	08004779 	.word	0x08004779
 800463c:	20000dac 	.word	0x20000dac

08004640 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	@ 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <xTimerGenericCommand+0x30>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	623b      	str	r3, [r7, #32]
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <xTimerGenericCommand+0x98>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02a      	beq.n	80046ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	dc18      	bgt.n	80046bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800468a:	f7ff fdad 	bl	80041e8 <xTaskGetSchedulerState>
 800468e:	4603      	mov	r3, r0
 8004690:	2b02      	cmp	r3, #2
 8004692:	d109      	bne.n	80046a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004694:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <xTimerGenericCommand+0x98>)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	f107 0110 	add.w	r1, r7, #16
 800469c:	2300      	movs	r3, #0
 800469e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a0:	f7fe f8d2 	bl	8002848 <xQueueGenericSend>
 80046a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80046a6:	e012      	b.n	80046ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <xTimerGenericCommand+0x98>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	f107 0110 	add.w	r1, r7, #16
 80046b0:	2300      	movs	r3, #0
 80046b2:	2200      	movs	r2, #0
 80046b4:	f7fe f8c8 	bl	8002848 <xQueueGenericSend>
 80046b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046ba:	e008      	b.n	80046ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <xTimerGenericCommand+0x98>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	f107 0110 	add.w	r1, r7, #16
 80046c4:	2300      	movs	r3, #0
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	f7fe f9c0 	bl	8002a4c <xQueueGenericSendFromISR>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3728      	adds	r7, #40	@ 0x28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000da8 	.word	0x20000da8

080046dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e6:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <prvProcessExpiredTimer+0x98>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fec9 	bl	800248c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d023      	beq.n	8004750 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	18d1      	adds	r1, r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f000 f8d5 	bl	80048c4 <prvInsertTimerInActiveList>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	2100      	movs	r1, #0
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff ff88 	bl	8004640 <xTimerGenericCommand>
 8004730:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d114      	bne.n	8004762 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	60fb      	str	r3, [r7, #12]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	4798      	blx	r3
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000da0 	.word	0x20000da0

08004778 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004780:	f107 0308 	add.w	r3, r7, #8
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f859 	bl	800483c <prvGetNextExpireTime>
 800478a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4619      	mov	r1, r3
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f805 	bl	80047a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004796:	f000 f8d7 	bl	8004948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800479a:	bf00      	nop
 800479c:	e7f0      	b.n	8004780 <prvTimerTask+0x8>
	...

080047a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047aa:	f7ff f929 	bl	8003a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f866 	bl	8004884 <prvSampleTimeNow>
 80047b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d130      	bne.n	8004822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <prvProcessTimerOrBlockTask+0x3c>
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d806      	bhi.n	80047dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ce:	f7ff f925 	bl	8003a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff81 	bl	80046dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047da:	e024      	b.n	8004826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <prvProcessTimerOrBlockTask+0x90>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <prvProcessTimerOrBlockTask+0x50>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <prvProcessTimerOrBlockTask+0x52>
 80047f0:	2300      	movs	r3, #0
 80047f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <prvProcessTimerOrBlockTask+0x94>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	f7fe fe65 	bl	80034d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004806:	f7ff f909 	bl	8003a1c <xTaskResumeAll>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <prvProcessTimerOrBlockTask+0x98>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
}
 8004820:	e001      	b.n	8004826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004822:	f7ff f8fb 	bl	8003a1c <xTaskResumeAll>
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000da4 	.word	0x20000da4
 8004834:	20000da8 	.word	0x20000da8
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004844:	4b0e      	ldr	r3, [pc, #56]	@ (8004880 <prvGetNextExpireTime+0x44>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <prvGetNextExpireTime+0x16>
 800484e:	2201      	movs	r2, #1
 8004850:	e000      	b.n	8004854 <prvGetNextExpireTime+0x18>
 8004852:	2200      	movs	r2, #0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <prvGetNextExpireTime+0x44>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e001      	b.n	8004870 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004870:	68fb      	ldr	r3, [r7, #12]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000da0 	.word	0x20000da0

08004884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800488c:	f7ff f964 	bl	8003b58 <xTaskGetTickCount>
 8004890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <prvSampleTimeNow+0x3c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	429a      	cmp	r2, r3
 800489a:	d205      	bcs.n	80048a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800489c:	f000 f93a 	bl	8004b14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e002      	b.n	80048ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048ae:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <prvSampleTimeNow+0x3c>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000db0 	.word	0x20000db0

080048c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d812      	bhi.n	8004910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e01b      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <prvInsertTimerInActiveList+0x7c>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fd fd86 	bl	800241a <vListInsert>
 800490e:	e012      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d206      	bcs.n	8004926 <prvInsertTimerInActiveList+0x62>
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e007      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004926:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <prvInsertTimerInActiveList+0x80>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3304      	adds	r3, #4
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fd fd72 	bl	800241a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000da4 	.word	0x20000da4
 8004944:	20000da0 	.word	0x20000da0

08004948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08e      	sub	sp, #56	@ 0x38
 800494c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800494e:	e0ce      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	da19      	bge.n	800498a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	3304      	adds	r3, #4
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fb      	str	r3, [r7, #28]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800497a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004980:	6850      	ldr	r0, [r2, #4]
 8004982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	4611      	mov	r1, r2
 8004988:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f2c0 80ae 	blt.w	8004aee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fd72 	bl	800248c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049a8:	463b      	mov	r3, r7
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff ff6a 	bl	8004884 <prvSampleTimeNow>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	f200 8097 	bhi.w	8004ae8 <prvProcessReceivedCommands+0x1a0>
 80049ba:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <prvProcessReceivedCommands+0x78>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049e9 	.word	0x080049e9
 80049c8:	080049e9 	.word	0x080049e9
 80049cc:	08004a5f 	.word	0x08004a5f
 80049d0:	08004a73 	.word	0x08004a73
 80049d4:	08004abf 	.word	0x08004abf
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049e9 	.word	0x080049e9
 80049e0:	08004a5f 	.word	0x08004a5f
 80049e4:	08004a73 	.word	0x08004a73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	18d1      	adds	r1, r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a08:	f7ff ff5c 	bl	80048c4 <prvInsertTimerInActiveList>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d06c      	beq.n	8004aec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d061      	beq.n	8004aec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	441a      	add	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	2100      	movs	r1, #0
 8004a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a3a:	f7ff fe01 	bl	8004640 <xTimerGenericCommand>
 8004a3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d152      	bne.n	8004aec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	61bb      	str	r3, [r7, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a70:	e03d      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	18d1      	adds	r1, r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab8:	f7ff ff04 	bl	80048c4 <prvInsertTimerInActiveList>
					break;
 8004abc:	e017      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ace:	f000 fbeb 	bl	80052a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ad2:	e00c      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ae6:	e002      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <prvProcessReceivedCommands+0x1a6>
					break;
 8004aec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aee:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <prvProcessReceivedCommands+0x1c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1d39      	adds	r1, r7, #4
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe f8d6 	bl	8002ca8 <xQueueReceive>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f47f af26 	bne.w	8004950 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3730      	adds	r7, #48	@ 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000da8 	.word	0x20000da8

08004b14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b1a:	e049      	b.n	8004bb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fd fca9 	bl	800248c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02f      	beq.n	8004bb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d90e      	bls.n	8004b80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fd fc4e 	bl	800241a <vListInsert>
 8004b7e:	e017      	b.n	8004bb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	2100      	movs	r1, #0
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fd58 	bl	8004640 <xTimerGenericCommand>
 8004b90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	603b      	str	r3, [r7, #0]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bb0:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1b0      	bne.n	8004b1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bba:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <prvSwitchTimerLists+0xc8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <prvSwitchTimerLists+0xc4>)
 8004bc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bc8:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <prvSwitchTimerLists+0xc8>)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	6013      	str	r3, [r2, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000da0 	.word	0x20000da0
 8004bdc:	20000da4 	.word	0x20000da4

08004be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004be6:	f000 f96f 	bl	8004ec8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <prvCheckForValidListAndQueue+0x60>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d120      	bne.n	8004c34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bf2:	4814      	ldr	r0, [pc, #80]	@ (8004c44 <prvCheckForValidListAndQueue+0x64>)
 8004bf4:	f7fd fbc0 	bl	8002378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bf8:	4813      	ldr	r0, [pc, #76]	@ (8004c48 <prvCheckForValidListAndQueue+0x68>)
 8004bfa:	f7fd fbbd 	bl	8002378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bfe:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <prvCheckForValidListAndQueue+0x6c>)
 8004c00:	4a10      	ldr	r2, [pc, #64]	@ (8004c44 <prvCheckForValidListAndQueue+0x64>)
 8004c02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c04:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <prvCheckForValidListAndQueue+0x70>)
 8004c06:	4a10      	ldr	r2, [pc, #64]	@ (8004c48 <prvCheckForValidListAndQueue+0x68>)
 8004c08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <prvCheckForValidListAndQueue+0x74>)
 8004c10:	4a11      	ldr	r2, [pc, #68]	@ (8004c58 <prvCheckForValidListAndQueue+0x78>)
 8004c12:	2110      	movs	r1, #16
 8004c14:	200a      	movs	r0, #10
 8004c16:	f7fd fccd 	bl	80025b4 <xQueueGenericCreateStatic>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <prvCheckForValidListAndQueue+0x60>)
 8004c1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <prvCheckForValidListAndQueue+0x60>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <prvCheckForValidListAndQueue+0x60>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	490b      	ldr	r1, [pc, #44]	@ (8004c5c <prvCheckForValidListAndQueue+0x7c>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fbfa 	bl	8003428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c34:	f000 f97a 	bl	8004f2c <vPortExitCritical>
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000da8 	.word	0x20000da8
 8004c44:	20000d78 	.word	0x20000d78
 8004c48:	20000d8c 	.word	0x20000d8c
 8004c4c:	20000da0 	.word	0x20000da0
 8004c50:	20000da4 	.word	0x20000da4
 8004c54:	20000e54 	.word	0x20000e54
 8004c58:	20000db4 	.word	0x20000db4
 8004c5c:	08005738 	.word	0x08005738

08004c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c90:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc4 <pxPortInitialiseStack+0x64>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b14      	subs	r3, #20
 8004c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f06f 0202 	mvn.w	r2, #2
 8004cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b20      	subs	r3, #32
 8004cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	08004cc9 	.word	0x08004cc9

08004cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cd2:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <prvTaskExitError+0x58>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d00b      	beq.n	8004cf4 <prvTaskExitError+0x2c>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <prvTaskExitError+0x28>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60bb      	str	r3, [r7, #8]
}
 8004d06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d08:	bf00      	nop
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0fc      	beq.n	8004d0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000010 	.word	0x20000010
	...

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	@ (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <xPortStartScheduler+0x124>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ea8 <xPortStartScheduler+0x128>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10b      	bne.n	8004da8 <xPortStartScheduler+0x28>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea4 <xPortStartScheduler+0x124>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a3f      	ldr	r2, [pc, #252]	@ (8004eac <xPortStartScheduler+0x12c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10b      	bne.n	8004dca <xPortStartScheduler+0x4a>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <xPortStartScheduler+0x130>)
 8004dcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	22ff      	movs	r2, #255	@ 0xff
 8004dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <xPortStartScheduler+0x134>)
 8004df0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df8:	e009      	b.n	8004e0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b80      	cmp	r3, #128	@ 0x80
 8004e18:	d0ef      	beq.n	8004dfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1c3 0307 	rsb	r3, r3, #7
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d00b      	beq.n	8004e3e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60bb      	str	r3, [r7, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <xPortStartScheduler+0x138>)
 8004e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e5c:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e68:	4b14      	ldr	r3, [pc, #80]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	@ (8004ebc <xPortStartScheduler+0x13c>)
 8004e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e74:	f000 f8da 	bl	800502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <xPortStartScheduler+0x140>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e7e:	f000 f8f9 	bl	8005074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <xPortStartScheduler+0x144>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec4 <xPortStartScheduler+0x144>)
 8004e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e8e:	f7ff ff63 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e92:	f7fe ff2b 	bl	8003cec <vTaskSwitchContext>
	prvTaskExitError();
 8004e96:	f7ff ff17 	bl	8004cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed00 	.word	0xe000ed00
 8004ea8:	410fc271 	.word	0x410fc271
 8004eac:	410fc270 	.word	0x410fc270
 8004eb0:	e000e400 	.word	0xe000e400
 8004eb4:	20000ea4 	.word	0x20000ea4
 8004eb8:	20000ea8 	.word	0x20000ea8
 8004ebc:	e000ed20 	.word	0xe000ed20
 8004ec0:	20000010 	.word	0x20000010
 8004ec4:	e000ef34 	.word	0xe000ef34

08004ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004eea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <vPortEnterCritical+0x5c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d110      	bne.n	8004f16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <vPortEnterCritical+0x60>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <vPortEnterCritical+0x4e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	603b      	str	r3, [r7, #0]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortEnterCritical+0x4a>
	}
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000010 	.word	0x20000010
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f32:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortExitCritical+0x26>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	607b      	str	r3, [r7, #4]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <vPortExitCritical+0x50>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <vPortExitCritical+0x44>
 8004f64:	2300      	movs	r3, #0
 8004f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000010 	.word	0x20000010

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f01e 0f10 	tst.w	lr, #16
 8004f90:	bf08      	it	eq
 8004f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	6010      	str	r0, [r2, #0]
 8004f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fa4:	f380 8811 	msr	BASEPRI, r0
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f7fe fe9c 	bl	8003cec <vTaskSwitchContext>
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f380 8811 	msr	BASEPRI, r0
 8004fbc:	bc09      	pop	{r0, r3}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc6:	f01e 0f10 	tst.w	lr, #16
 8004fca:	bf08      	it	eq
 8004fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fd0:	f380 8809 	msr	PSP, r0
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst>:
 8004fe0:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005002:	f7fe fdb9 	bl	8003b78 <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <xPortSysTickHandler+0x40>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005036:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <vPortSetupTimerInterrupt+0x38>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800503c:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <vPortSetupTimerInterrupt+0x3c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <vPortSetupTimerInterrupt+0x40>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	4a09      	ldr	r2, [pc, #36]	@ (8005070 <vPortSetupTimerInterrupt+0x44>)
 800504a:	3b01      	subs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800504e:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010
 8005064:	e000e018 	.word	0xe000e018
 8005068:	20000004 	.word	0x20000004
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	e000e014 	.word	0xe000e014

08005074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005074:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005084 <vPortEnableVFP+0x10>
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800507e:	6001      	str	r1, [r0, #0]
 8005080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005082:	bf00      	nop
 8005084:	e000ed88 	.word	0xe000ed88

08005088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d915      	bls.n	80050c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800509a:	4a18      	ldr	r2, [pc, #96]	@ (80050fc <vPortValidateInterruptPriority+0x74>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <vPortValidateInterruptPriority+0x78>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	7afa      	ldrb	r2, [r7, #11]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d20b      	bcs.n	80050c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <vPortValidateInterruptPriority+0x7c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005108 <vPortValidateInterruptPriority+0x80>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90b      	bls.n	80050ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	603b      	str	r3, [r7, #0]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <vPortValidateInterruptPriority+0x62>
	}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	e000e3f0 	.word	0xe000e3f0
 8005100:	20000ea4 	.word	0x20000ea4
 8005104:	e000ed0c 	.word	0xe000ed0c
 8005108:	20000ea8 	.word	0x20000ea8

0800510c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005118:	f7fe fc72 	bl	8003a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800511c:	4b5c      	ldr	r3, [pc, #368]	@ (8005290 <pvPortMalloc+0x184>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005124:	f000 f924 	bl	8005370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005128:	4b5a      	ldr	r3, [pc, #360]	@ (8005294 <pvPortMalloc+0x188>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 8095 	bne.w	8005260 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01e      	beq.n	800517a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800513c:	2208      	movs	r2, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d015      	beq.n	800517a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f023 0307 	bic.w	r3, r3, #7
 8005154:	3308      	adds	r3, #8
 8005156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <pvPortMalloc+0x6e>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	617b      	str	r3, [r7, #20]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d06f      	beq.n	8005260 <pvPortMalloc+0x154>
 8005180:	4b45      	ldr	r3, [pc, #276]	@ (8005298 <pvPortMalloc+0x18c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d86a      	bhi.n	8005260 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800518a:	4b44      	ldr	r3, [pc, #272]	@ (800529c <pvPortMalloc+0x190>)
 800518c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800518e:	4b43      	ldr	r3, [pc, #268]	@ (800529c <pvPortMalloc+0x190>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005194:	e004      	b.n	80051a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <pvPortMalloc+0xa6>
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f1      	bne.n	8005196 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <pvPortMalloc+0x184>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d051      	beq.n	8005260 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2208      	movs	r2, #8
 80051c2:	4413      	add	r3, r2
 80051c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	2308      	movs	r3, #8
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	429a      	cmp	r2, r3
 80051dc:	d920      	bls.n	8005220 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <pvPortMalloc+0xfc>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800521a:	69b8      	ldr	r0, [r7, #24]
 800521c:	f000 f90a 	bl	8005434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005220:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <pvPortMalloc+0x18c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a1b      	ldr	r2, [pc, #108]	@ (8005298 <pvPortMalloc+0x18c>)
 800522c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800522e:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <pvPortMalloc+0x18c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <pvPortMalloc+0x194>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d203      	bcs.n	8005242 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800523a:	4b17      	ldr	r3, [pc, #92]	@ (8005298 <pvPortMalloc+0x18c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <pvPortMalloc+0x194>)
 8005240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <pvPortMalloc+0x188>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	431a      	orrs	r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <pvPortMalloc+0x198>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <pvPortMalloc+0x198>)
 800525e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005260:	f7fe fbdc 	bl	8003a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <pvPortMalloc+0x17a>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <pvPortMalloc+0x176>
	return pvReturn;
 8005286:	69fb      	ldr	r3, [r7, #28]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	@ 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20001ab4 	.word	0x20001ab4
 8005294:	20001ac8 	.word	0x20001ac8
 8005298:	20001ab8 	.word	0x20001ab8
 800529c:	20001aac 	.word	0x20001aac
 80052a0:	20001abc 	.word	0x20001abc
 80052a4:	20001ac0 	.word	0x20001ac0

080052a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04f      	beq.n	800535a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052ba:	2308      	movs	r3, #8
 80052bc:	425b      	negs	r3, r3
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <vPortFree+0xbc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <vPortFree+0x46>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <vPortFree+0x66>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <vPortFree+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b0e      	ldr	r3, [pc, #56]	@ (8005364 <vPortFree+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005334:	f7fe fb64 	bl	8003a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <vPortFree+0xc0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4413      	add	r3, r2
 8005342:	4a09      	ldr	r2, [pc, #36]	@ (8005368 <vPortFree+0xc0>)
 8005344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005346:	6938      	ldr	r0, [r7, #16]
 8005348:	f000 f874 	bl	8005434 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800534c:	4b07      	ldr	r3, [pc, #28]	@ (800536c <vPortFree+0xc4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a06      	ldr	r2, [pc, #24]	@ (800536c <vPortFree+0xc4>)
 8005354:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005356:	f7fe fb61 	bl	8003a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20001ac8 	.word	0x20001ac8
 8005368:	20001ab8 	.word	0x20001ab8
 800536c:	20001ac4 	.word	0x20001ac4

08005370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005376:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800537a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800537c:	4b27      	ldr	r3, [pc, #156]	@ (800541c <prvHeapInit+0xac>)
 800537e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a1f      	ldr	r2, [pc, #124]	@ (800541c <prvHeapInit+0xac>)
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005420 <prvHeapInit+0xb0>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <prvHeapInit+0xb0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053bc:	2208      	movs	r2, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <prvHeapInit+0xb4>)
 80053d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <prvHeapInit+0xb4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <prvHeapInit+0xb4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <prvHeapInit+0xb4>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <prvHeapInit+0xb8>)
 80053fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a09      	ldr	r2, [pc, #36]	@ (800542c <prvHeapInit+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005408:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <prvHeapInit+0xc0>)
 800540a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20000eac 	.word	0x20000eac
 8005420:	20001aac 	.word	0x20001aac
 8005424:	20001ab4 	.word	0x20001ab4
 8005428:	20001abc 	.word	0x20001abc
 800542c:	20001ab8 	.word	0x20001ab8
 8005430:	20001ac8 	.word	0x20001ac8

08005434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800543c:	4b28      	ldr	r3, [pc, #160]	@ (80054e0 <prvInsertBlockIntoFreeList+0xac>)
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e002      	b.n	8005448 <prvInsertBlockIntoFreeList+0x14>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d8f7      	bhi.n	8005442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d108      	bne.n	8005476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d118      	bne.n	80054bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d00d      	beq.n	80054b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e008      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e003      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d002      	beq.n	80054d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20001aac 	.word	0x20001aac
 80054e4:	20001ab4 	.word	0x20001ab4

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <_reclaim_reent>:
 80054f8:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <_reclaim_reent+0xa8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4283      	cmp	r3, r0
 80054fe:	b570      	push	{r4, r5, r6, lr}
 8005500:	4604      	mov	r4, r0
 8005502:	d04b      	beq.n	800559c <_reclaim_reent+0xa4>
 8005504:	69c3      	ldr	r3, [r0, #28]
 8005506:	b1ab      	cbz	r3, 8005534 <_reclaim_reent+0x3c>
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	b16b      	cbz	r3, 8005528 <_reclaim_reent+0x30>
 800550c:	2500      	movs	r5, #0
 800550e:	69e3      	ldr	r3, [r4, #28]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	5959      	ldr	r1, [r3, r5]
 8005514:	2900      	cmp	r1, #0
 8005516:	d13b      	bne.n	8005590 <_reclaim_reent+0x98>
 8005518:	3504      	adds	r5, #4
 800551a:	2d80      	cmp	r5, #128	@ 0x80
 800551c:	d1f7      	bne.n	800550e <_reclaim_reent+0x16>
 800551e:	69e3      	ldr	r3, [r4, #28]
 8005520:	4620      	mov	r0, r4
 8005522:	68d9      	ldr	r1, [r3, #12]
 8005524:	f000 f872 	bl	800560c <_free_r>
 8005528:	69e3      	ldr	r3, [r4, #28]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	b111      	cbz	r1, 8005534 <_reclaim_reent+0x3c>
 800552e:	4620      	mov	r0, r4
 8005530:	f000 f86c 	bl	800560c <_free_r>
 8005534:	6961      	ldr	r1, [r4, #20]
 8005536:	b111      	cbz	r1, 800553e <_reclaim_reent+0x46>
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f867 	bl	800560c <_free_r>
 800553e:	69e1      	ldr	r1, [r4, #28]
 8005540:	b111      	cbz	r1, 8005548 <_reclaim_reent+0x50>
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f862 	bl	800560c <_free_r>
 8005548:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800554a:	b111      	cbz	r1, 8005552 <_reclaim_reent+0x5a>
 800554c:	4620      	mov	r0, r4
 800554e:	f000 f85d 	bl	800560c <_free_r>
 8005552:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005554:	b111      	cbz	r1, 800555c <_reclaim_reent+0x64>
 8005556:	4620      	mov	r0, r4
 8005558:	f000 f858 	bl	800560c <_free_r>
 800555c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800555e:	b111      	cbz	r1, 8005566 <_reclaim_reent+0x6e>
 8005560:	4620      	mov	r0, r4
 8005562:	f000 f853 	bl	800560c <_free_r>
 8005566:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005568:	b111      	cbz	r1, 8005570 <_reclaim_reent+0x78>
 800556a:	4620      	mov	r0, r4
 800556c:	f000 f84e 	bl	800560c <_free_r>
 8005570:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005572:	b111      	cbz	r1, 800557a <_reclaim_reent+0x82>
 8005574:	4620      	mov	r0, r4
 8005576:	f000 f849 	bl	800560c <_free_r>
 800557a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800557c:	b111      	cbz	r1, 8005584 <_reclaim_reent+0x8c>
 800557e:	4620      	mov	r0, r4
 8005580:	f000 f844 	bl	800560c <_free_r>
 8005584:	6a23      	ldr	r3, [r4, #32]
 8005586:	b14b      	cbz	r3, 800559c <_reclaim_reent+0xa4>
 8005588:	4620      	mov	r0, r4
 800558a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800558e:	4718      	bx	r3
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	4620      	mov	r0, r4
 8005594:	f000 f83a 	bl	800560c <_free_r>
 8005598:	4631      	mov	r1, r6
 800559a:	e7bb      	b.n	8005514 <_reclaim_reent+0x1c>
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop
 80055a0:	20000014 	.word	0x20000014

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	@ (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	@ (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	@ (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	@ (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 f87e 	bl	80056b8 <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08005800 	.word	0x08005800
 80055e0:	08005800 	.word	0x08005800
 80055e4:	08005800 	.word	0x08005800
 80055e8:	08005804 	.word	0x08005804

080055ec <__retarget_lock_acquire_recursive>:
 80055ec:	4770      	bx	lr

080055ee <__retarget_lock_release_recursive>:
 80055ee:	4770      	bx	lr

080055f0 <memcpy>:
 80055f0:	440a      	add	r2, r1
 80055f2:	4291      	cmp	r1, r2
 80055f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055f8:	d100      	bne.n	80055fc <memcpy+0xc>
 80055fa:	4770      	bx	lr
 80055fc:	b510      	push	{r4, lr}
 80055fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005606:	4291      	cmp	r1, r2
 8005608:	d1f9      	bne.n	80055fe <memcpy+0xe>
 800560a:	bd10      	pop	{r4, pc}

0800560c <_free_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4605      	mov	r5, r0
 8005610:	2900      	cmp	r1, #0
 8005612:	d041      	beq.n	8005698 <_free_r+0x8c>
 8005614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005618:	1f0c      	subs	r4, r1, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfb8      	it	lt
 800561e:	18e4      	addlt	r4, r4, r3
 8005620:	f000 f83e 	bl	80056a0 <__malloc_lock>
 8005624:	4a1d      	ldr	r2, [pc, #116]	@ (800569c <_free_r+0x90>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	b933      	cbnz	r3, 8005638 <_free_r+0x2c>
 800562a:	6063      	str	r3, [r4, #4]
 800562c:	6014      	str	r4, [r2, #0]
 800562e:	4628      	mov	r0, r5
 8005630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005634:	f000 b83a 	b.w	80056ac <__malloc_unlock>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d908      	bls.n	800564e <_free_r+0x42>
 800563c:	6820      	ldr	r0, [r4, #0]
 800563e:	1821      	adds	r1, r4, r0
 8005640:	428b      	cmp	r3, r1
 8005642:	bf01      	itttt	eq
 8005644:	6819      	ldreq	r1, [r3, #0]
 8005646:	685b      	ldreq	r3, [r3, #4]
 8005648:	1809      	addeq	r1, r1, r0
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	e7ed      	b.n	800562a <_free_r+0x1e>
 800564e:	461a      	mov	r2, r3
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	b10b      	cbz	r3, 8005658 <_free_r+0x4c>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d9fa      	bls.n	800564e <_free_r+0x42>
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	1850      	adds	r0, r2, r1
 800565c:	42a0      	cmp	r0, r4
 800565e:	d10b      	bne.n	8005678 <_free_r+0x6c>
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	4401      	add	r1, r0
 8005664:	1850      	adds	r0, r2, r1
 8005666:	4283      	cmp	r3, r0
 8005668:	6011      	str	r1, [r2, #0]
 800566a:	d1e0      	bne.n	800562e <_free_r+0x22>
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	4408      	add	r0, r1
 8005674:	6010      	str	r0, [r2, #0]
 8005676:	e7da      	b.n	800562e <_free_r+0x22>
 8005678:	d902      	bls.n	8005680 <_free_r+0x74>
 800567a:	230c      	movs	r3, #12
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	e7d6      	b.n	800562e <_free_r+0x22>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	1821      	adds	r1, r4, r0
 8005684:	428b      	cmp	r3, r1
 8005686:	bf04      	itt	eq
 8005688:	6819      	ldreq	r1, [r3, #0]
 800568a:	685b      	ldreq	r3, [r3, #4]
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	bf04      	itt	eq
 8005690:	1809      	addeq	r1, r1, r0
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	6054      	str	r4, [r2, #4]
 8005696:	e7ca      	b.n	800562e <_free_r+0x22>
 8005698:	bd38      	pop	{r3, r4, r5, pc}
 800569a:	bf00      	nop
 800569c:	20001c08 	.word	0x20001c08

080056a0 <__malloc_lock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	@ (80056a8 <__malloc_lock+0x8>)
 80056a2:	f7ff bfa3 	b.w	80055ec <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	20001c04 	.word	0x20001c04

080056ac <__malloc_unlock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <__malloc_unlock+0x8>)
 80056ae:	f7ff bf9e 	b.w	80055ee <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	20001c04 	.word	0x20001c04

080056b8 <_init>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr

080056c4 <_fini>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr
